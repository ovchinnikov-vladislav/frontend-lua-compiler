/*
 * Generated by classgen, version 1.5
 * 31.07.13 15:50
 */
package ic7cc.ovchinnikov.compiler.ast;

import ic7cc.ovchinnikov.compiler.ast.node.*;

public interface Visitor {

     void visit(Operation operation);
     void visit(StatementListNode statementListNode);
     void visit(VariableListNode variableListNode);
     void visit(NameListNode nameListNode);
     void visit(ExpressionListNode expressionListNode);
     void visit(FieldListNode fieldListNode);
     void visit(BlockNode blockNode);
     void visit(NameNode nameNode);
     void visit(TableConstructorNode tableConstructorNode);
     void visit(ReturnStatement returnStatement);
     void visit(ReturnNode reTurn);
     void visit(BreakNode bReak);
     void visit(Statement statement);
     void visit(AssignmentNode asm);
     void visit(FunctionCallStatementNode functionCallStatementNode);
     void visit(DoBlockNode doBlockNode);
     void visit(WhileBlockNode whileBlockNode);
     void visit(RepeatUntilNode repeatUntilNode);
     void visit(IfThenElseBlockNode ifThenElseBlockNode);
     void visit(ForBlockNode forBlockNode);
     void visit(ForInBlockNode forInBlockNode);
     void visit(LocalFunctionDefinitionNode localFunctionDefinitionNode);
     void visit(LocalNode localNode);
     void visit(Expression expression);
     void visit(NilNode nilNode);
     void visit(BooleanExpressionNode booleanExpressionNode);
     void visit(NumeralExpressionNode numeralExp);
     void visit(LiteralStringExpressionNode literalStringExp);
     void visit(DotDotDotNode dotDotDotNode);
     void visit(PrefixExpressionNode preExp);
     void visit(TableConstructorExpressionNode tableConstructorExp);
     void visit(BinaryOperationNode binaryOperationNode);
     void visit(UnaryOperationNode unaryOperationNode);
     void visit(FunctionExpressionNode functionExp);
     void visit(Variable variable);
     void visit(VariableNode variableNode);
     void visit(VariableTabIndexNode varTabIndex);
     void visit(PrefixExpression prefixExpression);
     void visit(PrefixExpressionVariableNode prefixExpressionVariableNode);
     void visit(PrefixExpressionFunctionCallNode prefixExpressionFunctionCallNode);
     void visit(PrefixExpressionExpressionNode prefixExpressionExpressionNode);
     void visit(FunctionCall functionCall);
     void visit(FunctionCallNode functionCallNode);
     void visit(FunctionCallSelfNode functionCallSelfNode);
     void visit(FunctionName functionName);
     void visit(FunctionNameVarNode funcNameVar);
     void visit(FunctionNameVarDotFunctionNameNode funcNameVarDotFuncName);
     void visit(FunctionNameColonVarNode functionNameColonVarNode);
     void visit(Field field);
     void visit(FieldLeftRightExpressionNode fieldLeftRightExpressionNode);
     void visit(FieldNameExpressionNode fieldNameExpressionNode);
     void visit(FieldExpressionNode fieldExpressionNode);
    
}
