
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 30 22:07:52 MSK 2020
//----------------------------------------------------

package ic7cc.ovchinnikov.compiler.parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import ic7cc.ovchinnikov.compiler.ast.*;
import ic7cc.ovchinnikov.compiler.ast.node.*;
import ic7cc.ovchinnikov.compiler.parser.location.*;
import ic7cc.ovchinnikov.compiler.parser.grammar.*;
import ic7cc.ovchinnikov.compiler.lexer.Lexer;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 30 22:07:52 MSK 2020
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\004\003" +
    "\000\002\004\004\000\002\006\003\000\002\006\005\000" +
    "\002\006\003\000\002\006\003\000\002\006\005\000\002" +
    "\006\007\000\002\006\006\000\002\006\010\000\002\006" +
    "\014\000\002\006\011\000\002\006\005\000\002\006\006" +
    "\000\002\006\005\000\002\003\007\000\002\003\004\000" +
    "\002\003\003\000\002\015\004\000\002\015\003\000\002" +
    "\012\004\000\002\012\003\000\002\005\005\000\002\005" +
    "\004\000\002\005\004\000\002\005\003\000\002\017\003" +
    "\000\002\017\005\000\002\017\005\000\002\007\003\000" +
    "\002\007\005\000\002\021\003\000\002\021\006\000\002" +
    "\021\005\000\002\016\003\000\002\016\005\000\002\010" +
    "\003\000\002\010\005\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\004\000\002\014\003\000\002" +
    "\014\003\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\023\003\000\002\023\003\000\002\023\005\000\002\013" +
    "\004\000\002\013\006\000\002\011\005\000\002\011\004" +
    "\000\002\011\003\000\002\011\003\000\002\020\007\000" +
    "\002\025\005\000\002\025\003\000\002\025\003\000\002" +
    "\025\002\000\002\024\005\000\002\024\004\000\002\026" +
    "\005\000\002\026\003\000\002\027\007\000\002\027\005" +
    "\000\002\027\003\000\002\030\003\000\002\030\003\000" +
    "\002\031\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\034\002\uff9d\007\007\010\012\012\017\013" +
    "\005\014\025\016\030\020\013\024\010\025\021\063\015" +
    "\071\004\075\011\001\002\000\044\002\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\063\ufffa\071" +
    "\ufffa\075\ufffa\001\002\000\036\010\035\026\040\027\047" +
    "\030\034\031\037\034\042\056\044\057\033\060\045\063" +
    "\015\067\041\073\053\074\052\075\011\001\002\000\016" +
    "\002\uffff\011\uffff\017\uffff\022\uffff\023\uffff\024\010\001" +
    "\002\000\006\010\276\075\177\001\002\000\052\002\uffe3" +
    "\010\035\011\uffe3\017\uffe3\022\uffe3\023\uffe3\026\040\027" +
    "\047\030\034\031\037\034\042\056\044\057\033\060\045" +
    "\063\015\067\041\071\272\073\053\074\052\075\011\001" +
    "\002\000\144\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055" +
    "\uffdd\056\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd" +
    "\070\uffdd\071\uffdd\072\uffdd\074\uffdd\075\uffdd\001\002\000" +
    "\004\075\264\001\002\000\036\010\035\026\040\027\047" +
    "\030\034\031\037\034\042\056\044\057\033\060\045\063" +
    "\015\067\041\073\053\074\052\075\011\001\002\000\004" +
    "\002\245\001\002\000\036\010\035\026\040\027\047\030" +
    "\034\031\037\034\042\056\044\057\033\060\045\063\015" +
    "\067\041\073\053\074\052\075\011\001\002\000\014\002" +
    "\ufffd\011\ufffd\017\ufffd\022\ufffd\023\ufffd\001\002\000\034" +
    "\007\007\010\012\011\uff9d\012\017\013\005\014\025\016" +
    "\030\020\013\024\010\025\021\063\015\071\004\075\011" +
    "\001\002\000\056\002\ufff8\005\uffb3\006\uffb3\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\063\ufff8\065" +
    "\uffb3\067\uffb3\071\ufff8\074\uffb3\075\ufff8\001\002\000\044" +
    "\002\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\063\ufff7\071\ufff7\075\ufff7\001\002\000\016\005" +
    "\062\006\055\063\057\065\060\067\041\074\056\001\002" +
    "\000\044\002\ufffc\007\007\010\012\011\ufffc\012\017\013" +
    "\005\014\025\016\030\017\ufffc\020\013\022\ufffc\023\ufffc" +
    "\024\ufffc\025\021\063\015\071\004\075\011\001\002\000" +
    "\022\004\uffdf\005\uffb4\006\uffb4\063\uffb4\065\uffb4\067\uffb4" +
    "\072\236\074\uffb4\001\002\000\004\075\214\001\002\000" +
    "\004\004\211\001\002\000\014\002\ufffe\011\ufffe\017\ufffe" +
    "\022\ufffe\023\ufffe\001\002\000\034\007\007\010\012\012" +
    "\017\013\005\014\025\016\030\017\uff9d\020\013\024\010" +
    "\025\021\063\015\071\004\075\011\001\002\000\004\017" +
    "\032\001\002\000\036\010\035\026\040\027\047\030\034" +
    "\031\037\034\042\056\044\057\033\060\045\063\015\067" +
    "\041\073\053\074\052\075\011\001\002\000\036\010\035" +
    "\026\040\027\047\030\034\031\037\034\042\056\044\057" +
    "\033\060\045\063\015\067\041\073\053\074\052\075\011" +
    "\001\002\000\130\002\uffd4\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\063\uffd4" +
    "\064\uffd4\066\uffd4\070\uffd4\071\uffd4\072\uffd4\075\uffd4\001" +
    "\002\000\004\063\174\001\002\000\116\002\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\032\103" +
    "\033\111\034\100\035\102\036\066\037\065\040\075\041" +
    "\076\042\073\043\106\044\070\045\112\046\101\047\072" +
    "\050\067\051\071\052\107\053\104\054\110\055\074\056" +
    "\105\063\ufff4\071\ufff4\075\ufff4\001\002\000\130\002\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054" +
    "\uffd1\055\uffd1\056\uffd1\063\uffd1\064\uffd1\066\uffd1\070\uffd1" +
    "\071\uffd1\072\uffd1\075\uffd1\001\002\000\130\002\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046" +
    "\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6" +
    "\055\uffd6\056\uffd6\063\uffd6\064\uffd6\066\uffd6\070\uffd6\071" +
    "\uffd6\072\uffd6\075\uffd6\001\002\000\042\010\035\026\040" +
    "\027\047\030\034\031\037\034\042\056\044\057\033\060" +
    "\045\063\015\065\157\067\041\070\154\073\053\074\052" +
    "\075\155\001\002\000\036\010\035\026\040\027\047\030" +
    "\034\031\037\034\042\056\044\057\033\060\045\063\015" +
    "\067\041\073\053\074\052\075\011\001\002\000\142\002" +
    "\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3" +
    "\074\uffb3\075\uffb3\001\002\000\036\010\035\026\040\027" +
    "\047\030\034\031\037\034\042\056\044\057\033\060\045" +
    "\063\015\067\041\073\053\074\052\075\011\001\002\000" +
    "\036\010\035\026\040\027\047\030\034\031\037\034\042" +
    "\056\044\057\033\060\045\063\015\067\041\073\053\074" +
    "\052\075\011\001\002\000\130\002\uffce\007\uffce\010\uffce" +
    "\011\uffce\012\uffce\013\uffce\014\uffce\016\uffce\017\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\032\uffce" +
    "\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041" +
    "\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce" +
    "\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056" +
    "\uffce\063\uffce\064\uffce\066\uffce\070\uffce\071\uffce\072\uffce" +
    "\075\uffce\001\002\000\130\002\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5" +
    "\063\uffd5\064\uffd5\066\uffd5\070\uffd5\071\uffd5\072\uffd5\075" +
    "\uffd5\001\002\000\142\002\uffcf\005\062\006\055\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\016\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\063\057\064\uffcf\065\060\066\uffcf\067\041" +
    "\070\uffcf\071\uffcf\072\uffcf\074\056\075\uffcf\001\002\000" +
    "\142\002\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\063" +
    "\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4" +
    "\072\uffb4\074\uffb4\075\uffb4\001\002\000\130\002\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\063\uffd2\064\uffd2\066\uffd2\070\uffd2\071" +
    "\uffd2\072\uffd2\075\uffd2\001\002\000\130\002\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\063\uffd3\064\uffd3\066\uffd3\070\uffd3\071\uffd3" +
    "\072\uffd3\075\uffd3\001\002\000\142\002\uffb1\005\uffb1\006" +
    "\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1" +
    "\054\uffb1\055\uffb1\056\uffb1\063\uffb1\064\uffb1\065\uffb1\066" +
    "\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\074\uffb1\075\uffb1" +
    "\001\002\000\004\075\146\001\002\000\142\002\uffac\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac" +
    "\014\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023" +
    "\uffac\024\uffac\025\uffac\032\uffac\033\uffac\034\uffac\035\uffac" +
    "\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac" +
    "\053\uffac\054\uffac\055\uffac\056\uffac\063\uffac\064\uffac\065" +
    "\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac\074\uffac" +
    "\075\uffac\001\002\000\040\010\035\026\040\027\047\030" +
    "\034\031\037\034\042\056\044\057\033\060\045\063\015" +
    "\064\140\067\041\073\053\074\052\075\011\001\002\000" +
    "\036\010\035\026\040\027\047\030\034\031\037\034\042" +
    "\056\044\057\033\060\045\063\015\067\041\073\053\074" +
    "\052\075\011\001\002\000\142\002\uffad\005\uffad\006\uffad" +
    "\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\025\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054" +
    "\uffad\055\uffad\056\uffad\063\uffad\064\uffad\065\uffad\066\uffad" +
    "\067\uffad\070\uffad\071\uffad\072\uffad\074\uffad\075\uffad\001" +
    "\002\000\004\075\063\001\002\000\144\002\uffdb\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\063\uffdb\064\uffdb" +
    "\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\074" +
    "\uffdb\075\uffdb\001\002\000\056\032\103\033\111\034\100" +
    "\035\102\036\066\037\065\040\075\041\076\042\073\043" +
    "\106\044\070\045\112\046\101\047\072\050\067\051\071" +
    "\052\107\053\104\054\110\055\074\056\105\066\077\001" +
    "\002\000\036\010\035\026\040\027\047\030\034\031\037" +
    "\034\042\056\044\057\033\060\045\063\015\067\041\073" +
    "\053\074\052\075\011\001\002\000\036\010\035\026\040" +
    "\027\047\030\034\031\037\034\042\056\044\057\033\060" +
    "\045\063\015\067\041\073\053\074\052\075\011\001\002" +
    "\000\036\010\035\026\040\027\047\030\034\031\037\034" +
    "\042\056\044\057\033\060\045\063\015\067\041\073\053" +
    "\074\052\075\011\001\002\000\036\010\035\026\040\027" +
    "\047\030\034\031\037\034\042\056\044\057\033\060\045" +
    "\063\015\067\041\073\053\074\052\075\011\001\002\000" +
    "\036\010\035\026\040\027\047\030\034\031\037\034\042" +
    "\056\044\057\033\060\045\063\015\067\041\073\053\074" +
    "\052\075\011\001\002\000\036\010\035\026\040\027\047" +
    "\030\034\031\037\034\042\056\044\057\033\060\045\063" +
    "\015\067\041\073\053\074\052\075\011\001\002\000\036" +
    "\010\035\026\040\027\047\030\034\031\037\034\042\056" +
    "\044\057\033\060\045\063\015\067\041\073\053\074\052" +
    "\075\011\001\002\000\036\010\035\026\040\027\047\030" +
    "\034\031\037\034\042\056\044\057\033\060\045\063\015" +
    "\067\041\073\053\074\052\075\011\001\002\000\036\010" +
    "\035\026\040\027\047\030\034\031\037\034\042\056\044" +
    "\057\033\060\045\063\015\067\041\073\053\074\052\075" +
    "\011\001\002\000\036\010\035\026\040\027\047\030\034" +
    "\031\037\034\042\056\044\057\033\060\045\063\015\067" +
    "\041\073\053\074\052\075\011\001\002\000\144\002\uffdc" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\032\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\063\uffdc" +
    "\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072" +
    "\uffdc\074\uffdc\075\uffdc\001\002\000\036\010\035\026\040" +
    "\027\047\030\034\031\037\034\042\056\044\057\033\060" +
    "\045\063\015\067\041\073\053\074\052\075\011\001\002" +
    "\000\036\010\035\026\040\027\047\030\034\031\037\034" +
    "\042\056\044\057\033\060\045\063\015\067\041\073\053" +
    "\074\052\075\011\001\002\000\036\010\035\026\040\027" +
    "\047\030\034\031\037\034\042\056\044\057\033\060\045" +
    "\063\015\067\041\073\053\074\052\075\011\001\002\000" +
    "\036\010\035\026\040\027\047\030\034\031\037\034\042" +
    "\056\044\057\033\060\045\063\015\067\041\073\053\074" +
    "\052\075\011\001\002\000\036\010\035\026\040\027\047" +
    "\030\034\031\037\034\042\056\044\057\033\060\045\063" +
    "\015\067\041\073\053\074\052\075\011\001\002\000\036" +
    "\010\035\026\040\027\047\030\034\031\037\034\042\056" +
    "\044\057\033\060\045\063\015\067\041\073\053\074\052" +
    "\075\011\001\002\000\036\010\035\026\040\027\047\030" +
    "\034\031\037\034\042\056\044\057\033\060\045\063\015" +
    "\067\041\073\053\074\052\075\011\001\002\000\036\010" +
    "\035\026\040\027\047\030\034\031\037\034\042\056\044" +
    "\057\033\060\045\063\015\067\041\073\053\074\052\075" +
    "\011\001\002\000\036\010\035\026\040\027\047\030\034" +
    "\031\037\034\042\056\044\057\033\060\045\063\015\067" +
    "\041\073\053\074\052\075\011\001\002\000\036\010\035" +
    "\026\040\027\047\030\034\031\037\034\042\056\044\057" +
    "\033\060\045\063\015\067\041\073\053\074\052\075\011" +
    "\001\002\000\036\010\035\026\040\027\047\030\034\031" +
    "\037\034\042\056\044\057\033\060\045\063\015\067\041" +
    "\073\053\074\052\075\011\001\002\000\130\002\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\032\103\033\111\034\100\035\102\036\uffc2\037\065" +
    "\040\075\041\076\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\110" +
    "\055\074\056\uffc2\063\uffc2\064\uffc2\066\uffc2\070\uffc2\071" +
    "\uffc2\072\uffc2\075\uffc2\001\002\000\130\002\uffcb\007\uffcb" +
    "\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\016\uffcb\017" +
    "\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\075\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055" +
    "\uffcb\056\uffcb\063\uffcb\064\uffcb\066\uffcb\070\uffcb\071\uffcb" +
    "\072\uffcb\075\uffcb\001\002\000\130\002\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\032" +
    "\103\033\111\034\100\035\102\036\uffbb\037\065\040\075" +
    "\041\076\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\056\uffbb\063\uffbb\064\uffbb\066\uffbb\070\uffbb\071\uffbb\072" +
    "\uffbb\075\uffbb\001\002\000\130\002\uffbd\007\uffbd\010\uffbd" +
    "\011\uffbd\012\uffbd\013\uffbd\014\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\032\103" +
    "\033\111\034\100\035\102\036\uffbd\037\065\040\075\041" +
    "\076\042\073\043\106\044\070\045\112\046\101\047\072" +
    "\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\110\055\074\056" +
    "\uffbd\063\uffbd\064\uffbd\066\uffbd\070\uffbd\071\uffbd\072\uffbd" +
    "\075\uffbd\001\002\000\130\002\uffc4\007\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\016\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\032\103\033" +
    "\111\034\100\035\102\036\uffc4\037\065\040\075\041\076" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\054\110\055\074\056\uffc4" +
    "\063\uffc4\064\uffc4\066\uffc4\070\uffc4\071\uffc4\072\uffc4\075" +
    "\uffc4\001\002\000\130\002\uffb9\007\uffb9\010\uffb9\011\uffb9" +
    "\012\uffb9\013\uffb9\014\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\032\103\033\111" +
    "\034\100\035\102\036\066\037\065\040\075\041\076\042" +
    "\073\043\106\044\070\045\112\046\101\047\072\050\067" +
    "\051\071\052\107\053\104\054\110\055\074\056\105\063" +
    "\uffb9\064\uffb9\066\uffb9\070\uffb9\071\uffb9\072\uffb9\075\uffb9" +
    "\001\002\000\130\002\uffbc\007\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\032\103\033\111\034" +
    "\100\035\102\036\uffbc\037\065\040\075\041\076\042\073" +
    "\043\106\044\070\045\112\046\101\047\072\050\uffbc\051" +
    "\uffbc\052\107\053\uffbc\054\110\055\074\056\uffbc\063\uffbc" +
    "\064\uffbc\066\uffbc\070\uffbc\071\uffbc\072\uffbc\075\uffbc\001" +
    "\002\000\130\002\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\032\uffcd\033\111\034\uffcd" +
    "\035\102\036\uffcd\037\065\040\075\041\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\063\uffcd\064" +
    "\uffcd\066\uffcd\070\uffcd\071\uffcd\072\uffcd\075\uffcd\001\002" +
    "\000\130\002\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013" +
    "\uffca\014\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\075\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052" +
    "\uffca\053\uffca\054\uffca\055\uffca\056\uffca\063\uffca\064\uffca" +
    "\066\uffca\070\uffca\071\uffca\072\uffca\075\uffca\001\002\000" +
    "\130\002\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\032\103\033\111\034\100\035\102" +
    "\036\uffc1\037\065\040\075\041\076\042\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\054\110\055\074\056\uffc1\063\uffc1\064\uffc1\066" +
    "\uffc1\070\uffc1\071\uffc1\072\uffc1\075\uffc1\001\002\000\130" +
    "\002\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\025\uffcc\032\uffcc\033\111\034\uffcc\035\102\036" +
    "\uffcc\037\065\040\075\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\063\uffcc\064\uffcc\066\uffcc" +
    "\070\uffcc\071\uffcc\072\uffcc\075\uffcc\001\002\000\130\002" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\032\uffc6\033\111\034\uffc6\035\102\036\uffc6" +
    "\037\065\040\075\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6" +
    "\054\uffc6\055\uffc6\056\uffc6\063\uffc6\064\uffc6\066\uffc6\070" +
    "\uffc6\071\uffc6\072\uffc6\075\uffc6\001\002\000\130\002\uffc7" +
    "\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\075\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\063\uffc7\064\uffc7\066\uffc7\070\uffc7" +
    "\071\uffc7\072\uffc7\075\uffc7\001\002\000\130\002\uffba\007" +
    "\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba\016\uffba" +
    "\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025" +
    "\uffba\032\103\033\111\034\100\035\102\036\uffba\037\065" +
    "\040\075\041\076\042\uffba\043\uffba\044\uffba\045\uffba\046" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\056\uffba\063\uffba\064\uffba\066\uffba\070\uffba\071" +
    "\uffba\072\uffba\075\uffba\001\002\000\130\002\uffc5\007\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\032\103\033\111\034\100\035\102\036\uffc5\037\065\040" +
    "\075\041\076\042\uffc5\043\106\044\uffc5\045\112\046\101" +
    "\047\072\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\110\055" +
    "\074\056\uffc5\063\uffc5\064\uffc5\066\uffc5\070\uffc5\071\uffc5" +
    "\072\uffc5\075\uffc5\001\002\000\130\002\uffc0\007\uffc0\010" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\032" +
    "\103\033\111\034\100\035\102\036\uffc0\037\065\040\075" +
    "\041\076\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\110\055\074" +
    "\056\uffc0\063\uffc0\064\uffc0\066\uffc0\070\uffc0\071\uffc0\072" +
    "\uffc0\075\uffc0\001\002\000\130\002\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\014\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\032\103" +
    "\033\111\034\100\035\102\036\uffbe\037\065\040\075\041" +
    "\076\042\073\043\106\044\070\045\112\046\101\047\072" +
    "\050\067\051\uffbe\052\107\053\104\054\110\055\074\056" +
    "\uffbe\063\uffbe\064\uffbe\066\uffbe\070\uffbe\071\uffbe\072\uffbe" +
    "\075\uffbe\001\002\000\130\002\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\032\103\033" +
    "\111\034\100\035\102\036\uffc3\037\065\040\075\041\076" +
    "\042\uffc3\043\106\044\uffc3\045\112\046\101\047\072\050" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\054\110\055\074\056\uffc3" +
    "\063\uffc3\064\uffc3\066\uffc3\070\uffc3\071\uffc3\072\uffc3\075" +
    "\uffc3\001\002\000\130\002\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\016\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\032\103\033\111" +
    "\034\100\035\102\036\uffbf\037\065\040\075\041\076\042" +
    "\073\043\106\044\070\045\112\046\101\047\072\050\uffbf" +
    "\051\uffbf\052\107\053\104\054\110\055\074\056\uffbf\063" +
    "\uffbf\064\uffbf\066\uffbf\070\uffbf\071\uffbf\072\uffbf\075\uffbf" +
    "\001\002\000\130\002\uffc9\007\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\032\103\033\111\034" +
    "\100\035\102\036\066\037\065\040\075\041\076\042\073" +
    "\043\106\044\070\045\112\046\101\047\072\050\067\051" +
    "\071\052\107\053\104\054\110\055\074\056\105\063\uffc9" +
    "\064\uffc9\066\uffc9\070\uffc9\071\uffc9\072\uffc9\075\uffc9\001" +
    "\002\000\130\002\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\040\075\041\uffc8\042\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\063\uffc8\064" +
    "\uffc8\066\uffc8\070\uffc8\071\uffc8\072\uffc8\075\uffc8\001\002" +
    "\000\142\002\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011" +
    "\uffae\012\uffae\013\uffae\014\uffae\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\032\uffae\033" +
    "\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050" +
    "\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae" +
    "\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070\uffae\071" +
    "\uffae\072\uffae\074\uffae\075\uffae\001\002\000\004\064\145" +
    "\001\002\000\122\002\uffd8\007\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\016\uffd8\017\uffd8\020\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\032\103\033\111\034\100\035" +
    "\102\036\066\037\065\040\075\041\076\042\073\043\106" +
    "\044\070\045\112\046\101\047\072\050\067\051\071\052" +
    "\107\053\104\054\110\055\074\056\105\063\uffd8\064\uffd8" +
    "\071\uffd8\072\143\075\uffd8\001\002\000\036\010\035\026" +
    "\040\027\047\030\034\031\037\034\042\056\044\057\033" +
    "\060\045\063\015\067\041\073\053\074\052\075\011\001" +
    "\002\000\046\002\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\016\uffd7\017\uffd7\020\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\063\uffd7\064\uffd7\071\uffd7\075\uffd7" +
    "\001\002\000\142\002\uffaf\005\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\016\uffaf\017\uffaf" +
    "\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\032" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf" +
    "\056\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070" +
    "\uffaf\071\uffaf\072\uffaf\074\uffaf\075\uffaf\001\002\000\010" +
    "\063\057\067\041\074\056\001\002\000\142\002\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\056\uffb0\063\uffb0\064\uffb0\065" +
    "\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0\074\uffb0" +
    "\075\uffb0\001\002\000\130\002\uffb6\007\uffb6\010\uffb6\011" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\016\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\032\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6" +
    "\063\uffb6\064\uffb6\066\uffb6\070\uffb6\071\uffb6\072\uffb6\075" +
    "\uffb6\001\002\000\130\002\uffb5\007\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\013\uffb5\014\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\063" +
    "\uffb5\064\uffb5\066\uffb5\070\uffb5\071\uffb5\072\uffb5\075\uffb5" +
    "\001\002\000\130\002\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\063\uffb8" +
    "\064\uffb8\066\uffb8\070\uffb8\071\uffb8\072\uffb8\075\uffb8\001" +
    "\002\000\010\070\uffa3\071\171\072\170\001\002\000\142" +
    "\002\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012" +
    "\uffa5\013\uffa5\014\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5" +
    "\022\uffa5\023\uffa5\024\uffa5\025\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5" +
    "\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\063\uffa5" +
    "\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072" +
    "\uffa5\074\uffa5\075\uffa5\001\002\000\100\004\166\005\uffdd" +
    "\006\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\056\uffdd\063\uffdd\065\uffdd\067\uffdd\070\uffdd" +
    "\071\uffdd\072\uffdd\074\uffdd\001\002\000\062\032\103\033" +
    "\111\034\100\035\102\036\066\037\065\040\075\041\076" +
    "\042\073\043\106\044\070\045\112\046\101\047\072\050" +
    "\067\051\071\052\107\053\104\054\110\055\074\056\105" +
    "\070\uffa0\071\uffa0\072\uffa0\001\002\000\036\010\035\026" +
    "\040\027\047\030\034\031\037\034\042\056\044\057\033" +
    "\060\045\063\015\067\041\073\053\074\052\075\011\001" +
    "\002\000\004\070\161\001\002\000\142\002\uffa6\005\uffa6" +
    "\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014" +
    "\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036" +
    "\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6" +
    "\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053" +
    "\uffa6\054\uffa6\055\uffa6\056\uffa6\063\uffa6\064\uffa6\065\uffa6" +
    "\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\074\uffa6\075" +
    "\uffa6\001\002\000\056\032\103\033\111\034\100\035\102" +
    "\036\066\037\065\040\075\041\076\042\073\043\106\044" +
    "\070\045\112\046\101\047\072\050\067\051\071\052\107" +
    "\053\104\054\110\055\074\056\105\066\163\001\002\000" +
    "\004\004\164\001\002\000\036\010\035\026\040\027\047" +
    "\030\034\031\037\034\042\056\044\057\033\060\045\063" +
    "\015\067\041\073\053\074\052\075\011\001\002\000\062" +
    "\032\103\033\111\034\100\035\102\036\066\037\065\040" +
    "\075\041\076\042\073\043\106\044\070\045\112\046\101" +
    "\047\072\050\067\051\071\052\107\053\104\054\110\055" +
    "\074\056\105\070\uffa2\071\uffa2\072\uffa2\001\002\000\036" +
    "\010\035\026\040\027\047\030\034\031\037\034\042\056" +
    "\044\057\033\060\045\063\015\067\041\073\053\074\052" +
    "\075\011\001\002\000\062\032\103\033\111\034\100\035" +
    "\102\036\066\037\065\040\075\041\076\042\073\043\106" +
    "\044\070\045\112\046\101\047\072\050\067\051\071\052" +
    "\107\053\104\054\110\055\074\056\105\070\uffa1\071\uffa1" +
    "\072\uffa1\001\002\000\040\010\uff9f\026\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\034\uff9f\056\uff9f\057\uff9f\060\uff9f\063\uff9f" +
    "\065\uff9f\067\uff9f\073\uff9f\074\uff9f\075\uff9f\001\002\000" +
    "\040\010\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\034\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\063\uff9e\065\uff9e\067\uff9e\073" +
    "\uff9e\074\uff9e\075\uff9e\001\002\000\040\010\035\026\040" +
    "\027\047\030\034\031\037\034\042\056\044\057\033\060" +
    "\045\063\015\065\157\067\041\073\053\074\052\075\155" +
    "\001\002\000\004\070\uffa4\001\002\000\010\031\200\064" +
    "\uffa7\075\177\001\002\000\130\002\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\016\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\063\uffd0\064\uffd0\066\uffd0\070\uffd0\071\uffd0\072\uffd0" +
    "\075\uffd0\001\002\000\006\064\uffa9\072\205\001\002\000" +
    "\052\002\uffda\004\uffda\007\uffda\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\016\uffda\017\uffda\020\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\uffda\063\uffda\064\uffda\071\uffda\072\uffda" +
    "\075\uffda\001\002\000\004\064\uffa8\001\002\000\004\064" +
    "\202\001\002\000\034\007\007\010\012\011\uff9d\012\017" +
    "\013\005\014\025\016\030\020\013\024\010\025\021\063" +
    "\015\071\004\075\011\001\002\000\004\011\204\001\002" +
    "\000\130\002\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013" +
    "\uffab\014\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\032\uffab\033\uffab\034\uffab\035" +
    "\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052" +
    "\uffab\053\uffab\054\uffab\055\uffab\056\uffab\063\uffab\064\uffab" +
    "\066\uffab\070\uffab\071\uffab\072\uffab\075\uffab\001\002\000" +
    "\006\031\207\075\206\001\002\000\054\002\uffd9\004\uffd9" +
    "\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\063\uffd9\064\uffd9\071\uffd9\072\uffd9\075\uffd9\001" +
    "\002\000\004\064\uffaa\001\002\000\130\002\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055" +
    "\uffb7\056\uffb7\063\uffb7\064\uffb7\066\uffb7\070\uffb7\071\uffb7" +
    "\072\uffb7\075\uffb7\001\002\000\036\010\035\026\040\027" +
    "\047\030\034\031\037\034\042\056\044\057\033\060\045" +
    "\063\015\067\041\073\053\074\052\075\011\001\002\000" +
    "\044\002\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\016\ufff9\017\ufff9\020\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\063\ufff9\071\ufff9\075\ufff9\001\002\000\006" +
    "\015\231\072\230\001\002\000\010\004\215\015\uffda\072" +
    "\uffda\001\002\000\036\010\035\026\040\027\047\030\034" +
    "\031\037\034\042\056\044\057\033\060\045\063\015\067" +
    "\041\073\053\074\052\075\011\001\002\000\056\032\103" +
    "\033\111\034\100\035\102\036\066\037\065\040\075\041" +
    "\076\042\073\043\106\044\070\045\112\046\101\047\072" +
    "\050\067\051\071\052\107\053\104\054\110\055\074\056" +
    "\105\072\217\001\002\000\036\010\035\026\040\027\047" +
    "\030\034\031\037\034\042\056\044\057\033\060\045\063" +
    "\015\067\041\073\053\074\052\075\011\001\002\000\060" +
    "\012\uff9d\032\103\033\111\034\100\035\102\036\066\037" +
    "\065\040\075\041\076\042\073\043\106\044\070\045\112" +
    "\046\101\047\072\050\067\051\071\052\107\053\104\054" +
    "\110\055\074\056\105\072\223\001\002\000\004\012\225" +
    "\001\002\000\004\012\uffe9\001\002\000\036\010\035\026" +
    "\040\027\047\030\034\031\037\034\042\056\044\057\033" +
    "\060\045\063\015\067\041\073\053\074\052\075\011\001" +
    "\002\000\056\012\uffea\032\103\033\111\034\100\035\102" +
    "\036\066\037\065\040\075\041\076\042\073\043\106\044" +
    "\070\045\112\046\101\047\072\050\067\051\071\052\107" +
    "\053\104\054\110\055\074\056\105\001\002\000\034\007" +
    "\007\010\012\011\uff9d\012\017\013\005\014\025\016\030" +
    "\020\013\024\010\025\021\063\015\071\004\075\011\001" +
    "\002\000\004\011\227\001\002\000\044\002\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\063\ufff2" +
    "\071\ufff2\075\ufff2\001\002\000\004\075\206\001\002\000" +
    "\036\010\035\026\040\027\047\030\034\031\037\034\042" +
    "\056\044\057\033\060\045\063\015\067\041\073\053\074" +
    "\052\075\011\001\002\000\004\012\233\001\002\000\034" +
    "\007\007\010\012\011\uff9d\012\017\013\005\014\025\016" +
    "\030\020\013\024\010\025\021\063\015\071\004\075\011" +
    "\001\002\000\004\011\235\001\002\000\044\002\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\063" +
    "\ufff1\071\ufff1\075\ufff1\001\002\000\006\063\015\075\011" +
    "\001\002\000\004\004\uffde\001\002\000\016\002\ufffb\011" +
    "\ufffb\017\ufffb\022\ufffb\023\ufffb\024\ufffb\001\002\000\004" +
    "\011\242\001\002\000\044\002\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\063\ufff6\071\ufff6\075" +
    "\ufff6\001\002\000\056\032\103\033\111\034\100\035\102" +
    "\036\066\037\065\040\075\041\076\042\073\043\106\044" +
    "\070\045\112\046\101\047\072\050\067\051\071\052\107" +
    "\053\104\054\110\055\074\056\105\064\244\001\002\000" +
    "\142\002\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\013\uffb2\014\uffb2\016\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\032\uffb2\033\uffb2" +
    "\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\063" +
    "\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2" +
    "\072\uffb2\074\uffb2\075\uffb2\001\002\000\004\002\001\001" +
    "\002\000\056\021\247\032\103\033\111\034\100\035\102" +
    "\036\066\037\065\040\075\041\076\042\073\043\106\044" +
    "\070\045\112\046\101\047\072\050\067\051\071\052\107" +
    "\053\104\054\110\055\074\056\105\001\002\000\040\007" +
    "\007\010\012\011\uff9d\012\017\013\005\014\025\016\030" +
    "\020\013\022\uff9d\023\uff9d\024\010\025\021\063\015\071" +
    "\004\075\011\001\002\000\010\011\uff9d\022\252\023\251" +
    "\001\002\000\036\010\035\026\040\027\047\030\034\031" +
    "\037\034\042\056\044\057\033\060\045\063\015\067\041" +
    "\073\053\074\052\075\011\001\002\000\034\007\007\010" +
    "\012\011\uff9d\012\017\013\005\014\025\016\030\020\013" +
    "\024\010\025\021\063\015\071\004\075\011\001\002\000" +
    "\004\011\uffeb\001\002\000\004\011\255\001\002\000\044" +
    "\002\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\063\ufff3\071\ufff3\075\ufff3\001\002\000\004\011" +
    "\uffec\001\002\000\056\021\260\032\103\033\111\034\100" +
    "\035\102\036\066\037\065\040\075\041\076\042\073\043" +
    "\106\044\070\045\112\046\101\047\072\050\067\051\071" +
    "\052\107\053\104\054\110\055\074\056\105\001\002\000" +
    "\040\007\007\010\012\011\uff9d\012\017\013\005\014\025" +
    "\016\030\020\013\022\uff9d\023\uff9d\024\010\025\021\063" +
    "\015\071\004\075\011\001\002\000\010\011\uff9d\022\252" +
    "\023\251\001\002\000\004\011\uffed\001\002\000\004\063" +
    "\174\001\002\000\010\005\266\006\265\063\uffe2\001\002" +
    "\000\004\075\270\001\002\000\004\075\264\001\002\000" +
    "\004\063\uffe0\001\002\000\004\063\uffe1\001\002\000\044" +
    "\002\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\063\ufff0\071\ufff0\075\ufff0\001\002\000\014\002" +
    "\uffe4\011\uffe4\017\uffe4\022\uffe4\023\uffe4\001\002\000\016" +
    "\002\uffe5\011\uffe5\017\uffe5\022\uffe5\023\uffe5\071\274\001" +
    "\002\000\014\002\uffe6\011\uffe6\017\uffe6\022\uffe6\023\uffe6" +
    "\001\002\000\050\002\uff9d\004\301\007\uff9d\010\uff9d\011" +
    "\uff9d\012\uff9d\013\uff9d\014\uff9d\016\uff9d\017\uff9d\020\uff9d" +
    "\022\uff9d\023\uff9d\024\uff9d\025\uff9d\063\uff9d\071\uff9d\072" +
    "\230\075\uff9d\001\002\000\004\075\277\001\002\000\004" +
    "\063\174\001\002\000\044\002\uffef\007\uffef\010\uffef\011" +
    "\uffef\012\uffef\013\uffef\014\uffef\016\uffef\017\uffef\020\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\063\uffef\071\uffef\075" +
    "\uffef\001\002\000\036\010\035\026\040\027\047\030\034" +
    "\031\037\034\042\056\044\057\033\060\045\063\015\067" +
    "\041\073\053\074\052\075\011\001\002\000\044\002\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\063\uffe7\071\uffe7\075\uffe7\001\002\000\044\002\uffee\007" +
    "\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\016\uffee" +
    "\017\uffee\020\uffee\022\uffee\023\uffee\024\uffee\025\uffee\063" +
    "\uffee\071\uffee\075\uffee\001\002\000\044\002\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\063\uffe8" +
    "\071\uffe8\075\uffe8\001\002\000\014\002\000\011\000\017" +
    "\000\022\000\023\000\001\002\000\056\012\307\032\103" +
    "\033\111\034\100\035\102\036\066\037\065\040\075\041" +
    "\076\042\073\043\106\044\070\045\112\046\101\047\072" +
    "\050\067\051\071\052\107\053\104\054\110\055\074\056" +
    "\105\001\002\000\034\007\007\010\012\011\uff9d\012\017" +
    "\013\005\014\025\016\030\020\013\024\010\025\021\063" +
    "\015\071\004\075\011\001\002\000\004\011\311\001\002" +
    "\000\044\002\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\063\ufff5\071\ufff5\075\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\024\002\013\004\005\005\026\006\022\007" +
    "\025\013\017\021\023\023\021\031\015\001\001\000\002" +
    "\001\001\000\014\013\042\014\305\021\050\023\047\024" +
    "\045\001\001\000\004\005\304\001\001\000\004\016\274" +
    "\001\001\000\016\010\272\013\042\014\141\021\050\023" +
    "\047\024\045\001\001\000\002\001\001\000\004\017\262" +
    "\001\001\000\014\013\042\014\245\021\050\023\047\024" +
    "\045\001\001\000\002\001\001\000\014\013\042\014\242" +
    "\021\050\023\047\024\045\001\001\000\002\001\001\000" +
    "\024\002\240\004\005\005\026\006\022\007\025\013\017" +
    "\021\023\023\021\031\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\053\024\060\001\001\000\016" +
    "\004\237\006\022\007\025\013\017\021\023\023\021\001" +
    "\001\000\002\001\001\000\004\016\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\002\030\004\005\005" +
    "\026\006\022\007\025\013\017\021\023\023\021\031\015" +
    "\001\001\000\002\001\001\000\014\013\042\014\035\021" +
    "\050\023\047\024\045\001\001\000\014\013\042\014\207" +
    "\021\050\023\047\024\045\001\001\000\002\001\001\000" +
    "\004\020\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\042\014\155\021\050\023" +
    "\047\024\045\026\157\027\152\001\001\000\014\013\042" +
    "\014\151\021\050\023\047\024\045\001\001\000\002\001" +
    "\001\000\014\013\042\014\150\021\050\023\047\024\045" +
    "\001\001\000\014\013\042\014\147\021\050\023\047\024" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\053\024\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\010\140\013\042\014\141\021" +
    "\050\023\047\024\045\001\001\000\014\013\042\014\063" +
    "\021\050\023\047\024\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\042\014\136\021\050\023\047\024\045\001\001\000" +
    "\014\013\042\014\135\021\050\023\047\024\045\001\001" +
    "\000\014\013\042\014\134\021\050\023\047\024\045\001" +
    "\001\000\014\013\042\014\133\021\050\023\047\024\045" +
    "\001\001\000\014\013\042\014\132\021\050\023\047\024" +
    "\045\001\001\000\014\013\042\014\131\021\050\023\047" +
    "\024\045\001\001\000\014\013\042\014\130\021\050\023" +
    "\047\024\045\001\001\000\014\013\042\014\127\021\050" +
    "\023\047\024\045\001\001\000\014\013\042\014\126\021" +
    "\050\023\047\024\045\001\001\000\014\013\042\014\125" +
    "\021\050\023\047\024\045\001\001\000\002\001\001\000" +
    "\014\013\042\014\124\021\050\023\047\024\045\001\001" +
    "\000\014\013\042\014\123\021\050\023\047\024\045\001" +
    "\001\000\014\013\042\014\122\021\050\023\047\024\045" +
    "\001\001\000\014\013\042\014\121\021\050\023\047\024" +
    "\045\001\001\000\014\013\042\014\120\021\050\023\047" +
    "\024\045\001\001\000\014\013\042\014\117\021\050\023" +
    "\047\024\045\001\001\000\014\013\042\014\116\021\050" +
    "\023\047\024\045\001\001\000\014\013\042\014\115\021" +
    "\050\023\047\024\045\001\001\000\014\013\042\014\114" +
    "\021\050\023\047\024\045\001\001\000\014\013\042\014" +
    "\113\021\050\023\047\024\045\001\001\000\014\013\042" +
    "\014\112\021\050\023\047\024\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\010\143\013\042\014\141\021\050\023" +
    "\047\024\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\146\024\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\013\042\014\161\021\050\023\047" +
    "\024\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\042\014\164" +
    "\021\050\023\047\024\045\001\001\000\002\001\001\000" +
    "\014\013\042\014\166\021\050\023\047\024\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\013\042\014\155\021\050\023\047\024\045\026\172" +
    "\027\152\001\001\000\002\001\001\000\006\016\175\025" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\202\004\005\005\026\006\022\007\025\013\017\021\023" +
    "\023\021\031\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\010\211\013\042\014\141\021" +
    "\050\023\047\024\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\042\014\215\021" +
    "\050\023\047\024\045\001\001\000\002\001\001\000\014" +
    "\013\042\014\217\021\050\023\047\024\045\001\001\000" +
    "\006\015\220\031\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\013\042\014\223\021\050\023\047\024" +
    "\045\001\001\000\002\001\001\000\024\002\225\004\005" +
    "\005\026\006\022\007\025\013\017\021\023\023\021\031" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\010\231\013\042\014\141\021\050\023" +
    "\047\024\045\001\001\000\002\001\001\000\024\002\233" +
    "\004\005\005\026\006\022\007\025\013\017\021\023\023" +
    "\021\031\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\236\013\042\021\023\023\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\247\004\005\005\026" +
    "\006\022\007\025\013\017\021\023\023\021\031\015\001" +
    "\001\000\006\003\253\031\252\001\001\000\014\013\042" +
    "\014\256\021\050\023\047\024\045\001\001\000\024\002" +
    "\255\004\005\005\026\006\022\007\025\013\017\021\023" +
    "\023\021\031\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\260\004\005\005\026\006\022\007\025\013" +
    "\017\021\023\023\021\031\015\001\001\000\006\003\261" +
    "\031\252\001\001\000\002\001\001\000\004\020\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\266" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\302\031\301\001\001\000\002\001\001\000" +
    "\004\020\277\001\001\000\002\001\001\000\016\010\303" +
    "\013\042\014\141\021\050\023\047\024\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\002\307\004\005\005" +
    "\026\006\022\007\025\013\017\021\023\023\021\031\015" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


  public boolean syntaxErrors;
  DefaultProductionRuleBroadcaster productionRuleBroadcaster;
  Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    productionRuleBroadcaster = new DefaultProductionRuleBroadcaster();

    symbolFactory = lex.getSymbolFactory();

    lexer = lex;

  }

  public int line, column;

  public void report_error(String message, Object info) {
    syntaxErrors = true;

    if (!(info instanceof Symbol) ) return;

    Symbol symbol = (Symbol) info;
    line = symbol.left;
    column = symbol.right;

    if (symbol.left < 0 || symbol.right < 0) return;

    System.out.println(message + " at line " + symbol.left + ", column " + symbol.right);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // empty ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // fieldsep ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsep",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // fieldsep ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsep",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // field ::= exp 
            {
              Field RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new FieldExp(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // field ::= NAME ASSIGNMENT exp 
            {
              Field RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new FieldNameExp(name, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // field ::= LBRACKET exp RBRACKET ASSIGNMENT exp 
            {
              Field RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new FieldLeftRightExp(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // fieldlist ::= field 
            {
              FieldList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new FieldList(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // fieldlist ::= field fieldsep fieldlist 
            {
              FieldList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                              if (fl == null) {
                                                                  RESULT = new FieldList(f);
                                                              } else {
                                                                  fl.addField(0, f);
                                                                  RESULT = fl;
                                                              }
                                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tableconstructor ::= LBRACE RBRACE 
            {
              TableConstructor RESULT =null;
		  RESULT = new TableConstructor(new FieldList()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tableconstructor ::= LBRACE fieldlist RBRACE 
            {
              TableConstructor RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new TableConstructor(fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parlist ::= 
            {
              ParList RESULT =null;
		
                                                              NameList nl = new NameList();
                                                              nl.setStart(LocationFactory.from(null));
                                                              nl.setEnd(LocationFactory.from(null));
                                                              RESULT = new ParList(nl, false);
                                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parlist ::= PARAMS 
            {
              ParList RESULT =null;
		
                                                              NameList nl = new NameList();
                                                              nl.setStart(LocationFactory.from(null));
                                                              nl.setEnd(LocationFactory.from(null));
                                                              RESULT = new ParList(nl, true);
                                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parlist ::= namelist 
            {
              ParList RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new ParList(nl, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parlist ::= namelist COMMA PARAMS 
            {
              ParList RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  RESULT = new ParList(nl, true);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // funcbody ::= LPAREN parlist RPAREN block END 
            {
              FuncBody RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParList pl = (ParList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new FuncBody(pl, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcbody",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // args ::= LITERAL_STRING 
            {
              ExpList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new ExpList(new LiteralStringExp(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // args ::= tableconstructor 
            {
              ExpList RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TableConstructor tc = (TableConstructor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new ExpList(new TableConstructorExp(tc)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // args ::= LPAREN RPAREN 
            {
              ExpList RESULT =null;
		  RESULT = new ExpList(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // args ::= LPAREN explist RPAREN 
            {
              ExpList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // functioncall ::= prefixexp COLON NAME args 
            {
              FunctionCall RESULT =null;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PrefixExp pexp = (PrefixExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList ar = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new FuncCallSelf(pexp, name, ar); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // functioncall ::= prefixexp args 
            {
              FunctionCall RESULT =null;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PrefixExp pexp = (PrefixExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList ar = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new FuncCall(pexp, ar); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // prefixexp ::= LPAREN exp RPAREN 
            {
              PrefixExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                    RESULT = new PrefixExpExp(e);
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // prefixexp ::= functioncall 
            {
              PrefixExp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                    System.out.println("Prefixexp");
                                                    RESULT = new PrefixExpFuncCall(fc);
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // prefixexp ::= var 
            {
              PrefixExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                    System.out.println("Prefixexp var");
                                                    RESULT = new PrefixExpVar(v);
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exp ::= BXOR exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Unop(Operation.BNOT, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp ::= LENGTH exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Unop(Operation.LENGTH, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp ::= NOT exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Unop(Operation.NOT, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp ::= SUB exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Unop(Operation.UNMINUS, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp ::= exp BXOR exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.BXOR, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp ::= exp BLEFT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.BLEFT, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp ::= exp BRIGHT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.BRIGHT, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp ::= exp BOR exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.BOR, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= exp BAND exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.BAND, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= exp OR exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.OR, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= exp AND exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.AND, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= exp MOREEQ exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.MOREEQ, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= exp MORE exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.MORE, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= exp LESS exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.LESS, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= exp NOTEQ exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.NOTEQ, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= exp LESSEQ exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.LESSEQ, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= exp EQUAL exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.EQUAL, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= exp CONCAT exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.CONCAT, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= exp POW exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.POW, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= exp MOD exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.MOD, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= exp FDIV exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.FDIV, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp DIV exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.DIV, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp MUL exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.MUL, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp SUB exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.SUB, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp ADD exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Binop(e1, Operation.ADD, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= tableconstructor 
            {
              Exp RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TableConstructor tc = (TableConstructor)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new TableConstructorExp(tc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= prefixexp 
            {
              Exp RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PrefixExp pe = (PrefixExp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new PreExp(pe); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= FUNCTION funcbody 
            {
              Exp RESULT =null;
		int fbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncBody fb = (FuncBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new FunctionExp(fb.getArgs(), fb.getVarArgs(), fb.getBlock()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= PARAMS 
            {
              Exp RESULT =null;
		  RESULT = new Dots();   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= LITERAL_STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new LiteralStringExp(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= NUMERAL 
            {
              Exp RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Number num = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	                                            NumeralExp.Type type = null;

                                                if (num instanceof Double)
                                                    type = NumeralExp.Type.DOUBLE;
	                                            else if (num instanceof Integer || num instanceof Long)
	                                                type = NumeralExp.Type.INTEGER;

	                                            RESULT = new NumeralExp(num, type);
	                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= TRUE 
            {
              Exp RESULT =null;
		  RESULT = new BooleanExp(true);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= FALSE 
            {
              Exp RESULT =null;
		  RESULT = new BooleanExp(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= NIL 
            {
              Exp RESULT =null;
		  RESULT = new Nil(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // explist ::= exp COMMA explist 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                if (el == null) {
                                                    el = new ExpList(e);
                                                    RESULT = el;
                                                } else {
                                                    el.addExp(0, e);
                                                    RESULT = el;
                                                }
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // explist ::= exp 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new ExpList(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // namelist ::= namelist COMMA NAME 
            {
              NameList RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  nl.append(new Name(name)); RESULT = nl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // namelist ::= NAME 
            {
              NameList RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new NameList(new Name(name)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var ::= prefixexp DOT NAME 
            {
              Var RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		PrefixExp pe = (PrefixExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new VarTabIndex(pe,  new LiteralStringExp(name)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var ::= prefixexp LBRACKET exp RBRACKET 
            {
              Var RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PrefixExp pe = (PrefixExp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new VarTabIndex(pe, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var ::= NAME 
            {
              Var RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Variable(name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // varlist ::= var COMMA varlist 
            {
              VarList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarList vl = (VarList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                     if (vl == null) {
                                                        vl = new VarList(v);
                                                        RESULT = vl;
                                                     } else {
                                                        vl.addVar(0, v);
                                                        RESULT = vl;
                                                     }
                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // varlist ::= var 
            {
              VarList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new VarList(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcname ::= NAME DOT funcname 
            {
              FuncName RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncName fn = (FuncName)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new FuncNameVarDotFuncName(new Name(name), fn); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcname ::= NAME COLON NAME 
            {
              FuncName RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new FuncNameColonVar(new Name(name1), new Name(name2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcname ::= NAME 
            {
              FuncName RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new FuncNameVar(new Name(name)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // retstat ::= RETURN 
            {
              RetStat RESULT =null;
		  RESULT = new Return(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retstat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // retstat ::= RETURN SEMICOLON 
            {
              RetStat RESULT =null;
		  RESULT = new Return(null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retstat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // retstat ::= RETURN explist 
            {
              RetStat RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Return(el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retstat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // retstat ::= RETURN explist SEMICOLON 
            {
              RetStat RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Return(el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retstat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assignexplist ::= empty 
            {
              ExpList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexplist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assignexplist ::= ASSIGNMENT explist 
            {
              ExpList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = el; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexplist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comforexp ::= empty 
            {
              Exp RESULT =null;
		  RESULT = new NumeralExp(1.0, NumeralExp.Type.DOUBLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comforexp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comforexp ::= COMMA exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comforexp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elselist ::= empty 
            {
              Block RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elselist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elselist ::= ELSE block 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = b;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elselist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // elselist ::= ELSEIF exp THEN block elselist 
            {
              Block RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elselleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elselright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block elsel = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Block(new StatList(new IfThenElseBlock(e, b, elsel)), null);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elselist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stat ::= LOCAL namelist assignexplist 
            {
              Stat RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new Local(nl, el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stat ::= LOCAL FUNCTION NAME funcbody 
            {
              Stat RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncBody fb = (FuncBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new LocalFunctionDef(name, fb.getArgs(), fb.getVarArgs(), fb.getBlock()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat ::= FUNCTION funcname funcbody 
            {
              Stat RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FuncName fn = (FuncName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncBody fb = (FuncBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                        VarList vl = FuncSyntactic.funcNameToVarList(fn);
                                                                        vl.setStart(fn.getStart());
                                                                        vl.setEnd(fn.getEnd());

                                                                        ExpList args = FuncSyntactic.methodDefinitionToExpression(fn, fb);
                                                                        args.setStart(fb.getStart());
                                                                        args.setEnd(fb.getEnd());

                                                                        Assignment asm = new Assignment(vl, args);

                                                                        RESULT = asm;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat ::= FOR namelist IN explist DO block END 
            {
              Stat RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new ForInBlock(nl, el, b);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= FOR NAME ASSIGNMENT exp COMMA exp comforexp DO block END 
            {
              Stat RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new ForBlock(name, e1, e2, e3, b);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= IF exp THEN block elselist END 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elselleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elselright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block elsel = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new IfThenElseBlock(e, b, elsel); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= REPEAT block UNTIL exp 
            {
              Stat RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new RepeatUntil(b, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= WHILE exp DO block END 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new WhileBlock(e, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stat ::= DO block END 
            {
              Stat RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                        System.out.println("stat - do end");
                                                                        RESULT = new DoBlock(b);
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stat ::= BREAK 
            {
              Stat RESULT =null;
		  RESULT = new Break(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stat ::= functioncall 
            {
              Stat RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new FuncCallStatement(fc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stat ::= varlist ASSIGNMENT explist 
            {
              Stat RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarList vl = (VarList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                        System.out.println("stat");
                                                                        RESULT = new Assignment(vl, el);
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stat ::= SEMICOLON 
            {
              Stat RESULT =null;
		
                                                                        System.out.println("SEMICOLON");
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statlist ::= stat statlist 
            {
              StatList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatList sl = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        System.out.println("Recurrent stat");
									    if (sl == null) {
										    sl = new StatList(s);
										    RESULT = sl;
		                                } else {
		                                    sl.addStat(0, s);
		                                    RESULT = sl;
		                                }

								    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statlist",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statlist ::= stat 
            {
              StatList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									    System.out.println("Single stat");
									    RESULT = new StatList(s);
								    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statlist",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= empty 
            {
              Block RESULT =null;
		
										StatList statlist = new StatList();
										statlist.setStart(LocationFactory.from(null));
										statlist.setEnd(LocationFactory.from(null));
										System.out.println("Empty block");
										RESULT = new Block(statlist, null);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= retstat 
            {
              Block RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RetStat rs = (RetStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        System.out.println("Block with retstat");
                                        StatList sl = new StatList();
                                        sl.setStart(rs.getStart());
                                        sl.setEnd(rs.getStart());
                                        RESULT = new Block(sl, rs);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= statlist 
            {
              Block RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatList sl = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        System.out.println("Block with statlist");
                                        RESULT = new Block(sl, null);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // block ::= statlist retstat 
            {
              Block RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatList sl = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RetStat rs = (RetStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        System.out.println("Block with statlist and retstat");
                                        RESULT = new Block(sl, rs);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= block EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block start_val = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

