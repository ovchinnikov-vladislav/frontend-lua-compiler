package ic7cc.ovchinnikov.compiler.parser;

/*
import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import ic7cc.ovchinnikov.compiler.ast.*;
import ic7cc.ovchinnikov.compiler.ast.node.*;
import ic7cc.ovchinnikov.compiler.parser.location.*;
*/
import ic7cc.ovchinnikov.compiler.lexer.Lexer;


parser code {:
  public void report_error(String message, Object info) {
      StringBuilder m = new StringBuilder("Error ");

      if (info instanceof java_cup.runtime.Symbol)
        m.append( "("+info.toString()+")" );

      m.append(" : "+message);

      System.out.println(m);
    }

    public void report_fatal_error(String message, Object info) {
      report_error(message, info);

    }
:};

 /* Terminals (tokens returned by lexer). */


terminal ASSIGNMENT; // =
terminal DOT, COLON;
terminal LOCAL, FUNCTION, END;
terminal DO, WHILE, FOR, IN, REPEAT, UNTIL;
terminal IF, THEN, ELSE, ELSEIF, RETURN, BREAK;
terminal NIL, FALSE, TRUE, PARAMS;
terminal ADD, MUL, SUB, DIV, MOD, POW, CONCAT;
terminal EQUAL, LESSEQ, NOTEQ, LESS, MORE, MOREEQ, AND, OR;
terminal BAND, BOR, BRIGHT, BLEFT;
terminal NOT, LENGTH;
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;
terminal SEMICOLON, COMMA;
terminal NUMBER, STRING;
terminal ID;

 /*NON TERMINALS */

non terminal chunk;
non terminal block, optelse;
non terminal stat;
non terminal statlist;
non terminal retstat;

non terminal funcname;
non terminal varlist;
non terminal var;
non terminal namelist;
non terminal explist, args, optassignexplist;
non terminal exp, optforexp;
non terminal prefixexp;
non terminal functioncall;
non terminal funcbody;
non terminal parlist;
non terminal tableconstructor;
non terminal fieldlist;
non terminal field;
non terminal fieldsep;
non terminal optfieldsep;
non terminal binop;
non terminal unop;
non terminal optsemi, empty;
non terminal Name;

precedence nonassoc LPAREN, RPAREN;
precedence nonassoc COMMA;

precedence left OR;
precedence left AND;
precedence left BOR;
precedence left BAND;
precedence left EQUAL, NOTEQ;
precedence left LESSEQ, LESS, MORE, MOREEQ;
precedence left BRIGHT, BLEFT;
precedence left ADD, SUB, CONCAT;
precedence left MUL, DIV, MOD;
precedence right POW;
precedence left LENGTH;

/* Grammar */

start with chunk;

chunk ::= block
;

block ::= statlist retstat
        | statlist
        | retstat
        | empty
        ;

statlist ::=  stat optsemi
            | stat optsemi statlist
            ;

retstat ::=   RETURN optsemi
            | RETURN explist optsemi
            | BREAK optsemi
            ;

stat ::=  varlist  ASSIGNMENT  explist
	    | functioncall
		| DO block END
		| WHILE exp DO block END
	    | REPEAT block UNTIL exp
		| IF exp THEN block optelse END
		| FOR ID  ASSIGNMENT  exp  COMMA  exp  optforexp  DO  block END
		| FOR  namelist  IN  explist  DO  block END
		| FUNCTION  funcname  funcbody
		| LOCAL  FUNCTION  Name  funcbody
		| LOCAL  namelist  optassignexplist
		;

varlist	::=  var
		   | var  COMMA  varlist
		   ;

explist ::=  exp
		   | exp COMMA explist
		   ;

functioncall ::=  prefixexp args
				| prefixexp COLON Name args
				;

exp	::=	 NIL
	   | FALSE
	   | TRUE
	   | NUMBER
	   | STRING
	   | PARAMS
	   | prefixexp
	   | tableconstructor
       | exp binop exp
	   | unop exp
	   | FUNCTION funcbody
	   ;

optelse	::=	 ELSE  block
		   | ELSEIF exp THEN  block optelse
		   | empty
		   ;

optforexp ::=  COMMA exp
			 | empty
             ;

namelist ::=  Name
			| namelist COMMA ID
			;

funcname ::=  Name
			| Name DOT funcname
			| Name COLON Name
			;

funcbody ::= LPAREN parlist RPAREN block END
			;

optassignexplist ::=  ASSIGNMENT explist
				    | empty
			        ;

var ::=  Name
	   | prefixexp LBRACKET exp RBRACKET
	   | prefixexp  DOT ID
	   ;

prefixexp ::=  var
			 | functioncall
			 | LPAREN exp RPAREN
			 ;

args ::=  LPAREN explist RPAREN
		| LPAREN RPAREN
		| tableconstructor
		| STRING
		;

tableconstructor ::=  LBRACE fieldlist RBRACE
 					| LBRACE RBRACE
 					;

binop ::=  ADD
		 | SUB
		 | MUL
		 | DIV
		 | MOD
		 | POW
		 | CONCAT
		 | EQUAL
		 | LESSEQ
		 | NOTEQ
		 | LESS
		 | MORE
		 | MOREEQ
		 | AND
		 | OR
		 | BAND
		 | BOR
		 | BRIGHT
		 | BLEFT
		 ;

unop ::=  SUB
		| NOT
		| LENGTH
		;

parlist ::=  namelist
		   | namelist  COMMA  PARAMS
		   | PARAMS
		   | /* empty */
		   ;

fieldlist ::=  field
			 | field fieldsep fieldlist
 			 ;

field ::=  LBRACKET exp RBRACKET ASSIGNMENT exp
		 | Name ASSIGNMENT exp
		 | exp
		 ;

fieldsep ::=  COMMA
            | SEMICOLON
			;

optfieldsep	::=	  COMMA
                | SEMICOLON
                | empty;

optsemi	::=	  SEMICOLON
            | empty
            ;

Name ::= ID;

empty ::= /* empty */;