/*
 * Generated by classgen, version 1.5
 * 31.07.13 15:50
 */
package ic7cc.ovchinnikov.compiler.ast;

import ic7cc.ovchinnikov.compiler.ast.node.*;

public interface Visitor {

     void visit(Operation operation);
     void visit(StatList statList);
     void visit(VarList varList);
     void visit(NameList nameList);
     void visit(ExpList expList);
     void visit(FieldList fieldList);
     void visit(Block block);
     void visit(Name name);
     void visit(TableConstructor tableConstructor);
     void visit(RetStat retStat);
     void visit(Return reTurn);
     void visit(Break bReak);
     void visit(Stat stat);
     void visit(Assignment asm);
     void visit(FuncCallStatement funcCallStatement);
     void visit(DoBlock doBlock);
     void visit(WhileBlock whileBlock);
     void visit(RepeatUntil repeatUntil);
     void visit(IfThenElseBlock ifThenElseBlock);
     void visit(ForBlock forBlock);
     void visit(ForInBlock forInBlock);
     void visit(LocalFunctionDef localFunctionDef);
     void visit(LocalDecl localDecl);
     void visit(Exp exp);
     void visit(Nil nil);
     void visit(BooleanExp booleanExp);
     void visit(NumeralExp numeralExp);
     void visit(LiteralStringExp literalStringExp);
     void visit(Dots dots);
     void visit(PreExp preExp);
     void visit(TableConstructorExp tableConstructorExp);
     void visit(Binop binop);
     void visit(Unop unop);
     void visit(FunctionExp functionExp);
     void visit(Var var);
     void visit(Variable variable);
     void visit(VarTabIndex varTabIndex);
     void visit(PrefixExp prefixExp);
     void visit(PrefixExpVar prefixExpVar);
     void visit(PrefixExpFuncCall prefixExpFuncCall);
     void visit(PrefixExpExp prefixExpExp);
     void visit(FunctionCall functionCall);
     void visit(FuncCall funcCall);
     void visit(FuncCallSelf funcCallSelf);
     void visit(FuncName funcName);
     void visit(FuncNameVar funcNameVar);
     void visit(FuncNameVarDotFuncName funcNameVarDotFuncName);
     void visit(FuncNameColonVar funcNameColonVar);
     void visit(Field field);
     void visit(FieldLeftRightExp fieldLeftRightExp);
     void visit(FieldNameExp fieldNameExp);
     void visit(FieldExp fieldExp);
    
}
