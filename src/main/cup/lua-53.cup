package ic7cc.ovchinnikov.compiler.parser;


import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import ic7cc.ovchinnikov.compiler.ast.*;
import ic7cc.ovchinnikov.compiler.ast.node.*;
import ic7cc.ovchinnikov.compiler.parser.location.*;

import ic7cc.ovchinnikov.compiler.lexer.Lexer;

scan with {: return lexer.next_token(); :};

parser code {:
  public boolean syntaxErrors;
  DefaultProductionRuleBroadcaster productionRuleBroadcaster;
  Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    productionRuleBroadcaster = new DefaultProductionRuleBroadcaster();

    symbolFactory = lex.getSymbolFactory();

    lexer = lex;

  }

  public int line, column;

  public void report_error(String message, Object info) {
    syntaxErrors = true;

    if (!(info instanceof Symbol) ) return;

    Symbol symbol = (Symbol) info;
    line = symbol.left;
    column = symbol.right;

    if (symbol.left < 0 || symbol.right < 0) return;

    System.out.println(message + " at line " + symbol.left + ", column " + symbol.right);
  }
:};

/* Терминалы (токены, которые будут прочитаны лексером). */

terminal ASSIGNMENT;                                        // =
terminal DOT, COLON;                                        // операция точки и двоеточие
terminal LOCAL, FUNCTION, END;
terminal DO, WHILE, FOR, IN, REPEAT, UNTIL;                 // циклические операторы
terminal IF, THEN, ELSE, ELSEIF, RETURN, BREAK;             // операторы управления выполнением кода
terminal NIL, FALSE, TRUE, PARAMS;                          // зарезервированные литералы
terminal ADD, MUL, SUB, DIV, FDIV, MOD, POW, CONCAT;        // арифметические операторы и оператор конкатенации
terminal EQUAL, LESSEQ, NOTEQ, LESS, MORE, MOREEQ, AND, OR; // операторы отношения
terminal BAND, BOR, BRIGHT, BLEFT, BXOR;                    // побитовые операторы
terminal NOT, LENGTH;                                       // унарные операторы
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;// скобки
terminal SEMICOLON, COMMA;                                  // точка с запятой и запятая
terminal NUMERAL, LITERAL_STRING;                           // Числовой и строковый литералы
terminal ID;                                                // Идентификаторы

 /*Нетерминалы */

non terminal Block block, elselist;
non terminal StatList statlist;
non terminal RetStat retstat;
non terminal Stat stat;

non terminal VarList varlist;
non terminal ExpList explist;
non terminal FunctionCall functioncall;
non terminal Name;
non terminal Exp exp;
non terminal NameList namelist;
non terminal FuncName funcname;
non terminal funcbody;
non terminal dotnamelist;
non terminal varadditlist;
non terminal Var var;
non terminal nameadditlist;
non terminal expadditlist;
non terminal PrefixExp prefixexp;
non terminal TableConstructor tableconstructor;
non terminal binop;
non terminal unop;
non terminal args;
non terminal ParList parlist;
non terminal FieldList fieldlist;
non terminal Field field;
non terminal fieldadditlist;
non terminal fieldsep;
non terminal empty;

// Приоритеты
precedence nonassoc LPAREN, RPAREN;
precedence nonassoc COMMA;

precedence left OR;
precedence left AND;
precedence left BOR;
precedence left BAND;
precedence left EQUAL, NOTEQ;
precedence left LESSEQ, LESS, MORE, MOREEQ;
precedence left BRIGHT, BLEFT;
precedence left ADD, SUB, CONCAT;
precedence left MUL, DIV, MOD;
precedence right POW;
precedence left LENGTH;

/* Продукции грамматики */

start with block;

block ::=  statlist:sl retstat:rs   {:
                                        //System.out.println("Block with statlist and retstat");
                                        RESULT = new Block(sl, rs);
                                    :}
         | statlist:sl              {:
                                        //System.out.println("Block with statlist");
                                        RESULT = new Block(sl, null);
                                    :}
         | retstat:rs               {:
                                        //System.out.println("Block with retstat");
                                        StatList statList = new StatList();
                                        statList.setStart(rs.getStart());
                                        statList.setEnd(rs.getStart());
                                        RESULT = new Block(null, rs);
                                    :}
         | empty                    {:
                                        //System.out.println("Block");
                                        RESULT = new Block(null, null);
                                    :}
         ;

statlist ::=  stat
            | stat statlist
            ;

stat ::=  SEMICOLON
        | varlist ASSIGNMENT explist
        | functioncall
        | BREAK
        | DO block END
        | WHILE exp DO block END
        | REPEAT block UNTIL exp
        | IF exp THEN block elselist END
        | FOR Name ASSIGNMENT exp COMMA exp DO block END
        | FOR Name ASSIGNMENT exp COMMA exp COMMA exp DO block END
        | FOR namelist IN explist DO block END
        | FUNCTION funcname funcbody
        | LOCAL FUNCTION Name funcbody
        | LOCAL namelist
        | LOCAL namelist ASSIGNMENT explist
        ;

elselist ::=  ELSEIF exp THEN block elselist
            | ELSE block
            | empty
              ;

retstat ::=  RETURN explist SEMICOLON
           | RETURN explist
           | RETURN SEMICOLON
           | RETURN
           ;

funcname ::=  Name dotnamelist COLON Name
            | Name dotnamelist
            ;

dotnamelist ::=  DOT Name dotnamelist
               | empty
               ;

varlist ::= var varadditlist;

var ::=  Name
       | prefixexp LBRACKET exp RBRACKET
       | prefixexp DOT Name
       ;

varadditlist ::=  COMMA var varadditlist
                | empty
                ;

namelist ::= Name nameadditlist;

nameadditlist ::=  COMMA Name nameadditlist
                 | empty
                 ;

explist ::= exp expadditlist;

exp	::=	 NIL
	   | FALSE
	   | TRUE
	   | NUMERAL
	   | LITERAL_STRING
	   | PARAMS
	   | FUNCTION funcbody // functiondef
	   | prefixexp
	   | tableconstructor
       | exp binop exp
	   | unop exp
	   ;

expadditlist ::=  COMMA exp expadditlist
                | empty
                ;

prefixexp ::=  var
             | functioncall
             | LPAREN exp RPAREN
             ;

functioncall ::=  prefixexp args
                | prefixexp COLON Name args
                ;

args ::=  LPAREN explist RPAREN
        | LPAREN RPAREN
        | tableconstructor
        | LITERAL_STRING
        ;

funcbody ::=  LPAREN parlist RPAREN block END
            | LPAREN RPAREN block END
            ;

parlist ::=  namelist COMMA PARAMS
           | namelist
           | PARAMS;

tableconstructor ::=  LBRACE fieldlist RBRACE
                    | LBRACE RBRACE;

fieldlist ::=  field fieldadditlist fieldsep
             | field fieldadditlist
             ;

field ::=  LBRACKET exp RBRACKET ASSIGNMENT exp
         | Name ASSIGNMENT exp
         | exp
         ;

fieldsep ::=  COMMA
            | SEMICOLON
            ;

fieldadditlist ::=  fieldsep field fieldadditlist
                  | empty
                  ;

binop ::=  ADD
		 | SUB
		 | MUL
		 | DIV
		 | FDIV
		 | MOD
		 | POW
		 | CONCAT
		 | EQUAL
		 | LESSEQ
		 | NOTEQ
		 | LESS
		 | MORE
		 | MOREEQ
		 | AND
		 | OR
		 | BAND
		 | BOR
		 | BRIGHT
		 | BLEFT
		 | BXOR
		 ;

unop ::=  SUB
		| NOT
		| LENGTH
		| BXOR
		;

Name ::= ID;

empty ::= /* empty */;