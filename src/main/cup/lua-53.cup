package ic7cc.ovchinnikov.compiler.parser;


import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import ic7cc.ovchinnikov.compiler.ast.*;
import ic7cc.ovchinnikov.compiler.ast.node.*;
import ic7cc.ovchinnikov.compiler.parser.location.*;

import ic7cc.ovchinnikov.compiler.lexer.Lexer;

scan with {: return lexer.next_token(); :};

parser code {:
  public boolean syntaxErrors;
  Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);

    symbolFactory = lex.getSymbolFactory();

    lexer = lex;

  }

  public int line, column;

  public void report_error(String message, Object info) {
    syntaxErrors = true;

    if (!(info instanceof Symbol) ) return;

    Symbol symbol = (Symbol) info;
    line = symbol.left;
    column = symbol.right;

    if (symbol.left < 0 || symbol.right < 0) return;

    System.out.println(message + " at line " + symbol.left + ", column " + symbol.right);
  }
:};

/* Терминалы (токены, которые будут прочитаны лексером). */
terminal ASSIGNMENT;                                        // =
terminal DOT, COLON;                                        // операция точки и двоеточие
terminal LOCAL, FUNCTION, END;
terminal DO, WHILE, FOR, IN, REPEAT, UNTIL;                 // циклические операторы
terminal IF, THEN, ELSE, ELSEIF, RETURN, BREAK;             // операторы управления выполнением кода
terminal NIL, FALSE, TRUE, PARAMS;                          // зарезервированные литералы
terminal ADD, MUL, SUB, DIV, FDIV, MOD, POW, CONCAT;        // арифметические операторы и оператор конкатенации
terminal EQUAL, LESSEQ, NOTEQ, LESS, MORE, MOREEQ, AND, OR; // операторы отношения
terminal BAND, BOR, BRIGHT, BLEFT, BXOR;                    // побитовые операторы
terminal NOT, LENGTH, UNMINUS, BNOT;                        // унарные операторы
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;// скобки
terminal SEMICOLON, COMMA;                                  // точка с запятой и запятая
terminal Number NUMERAL;                                    // Числовой литерал
terminal String LITERAL_STRING;                             // Строковый литерал
terminal String NAME;                                       // Идентификаторы

 /*Нетерминалы */

non terminal BlockNode blockNode, elselist;
non terminal StatementListNode statlist;
non terminal ReturnStatement retstat;
non terminal Statement stat;

non terminal VariableListNode varlist;
non terminal ExpressionListNode explist, args, assignexplist;
non terminal FunctionCall functioncall;
non terminal Expression expression, comforexp;
non terminal NameListNode namelist;
non terminal FunctionName funcname;
non terminal FunctionBodyNode funcbody;
non terminal Variable var;
non terminal PrefixExpression prefixexp;
non terminal TableConstructorNode tableconstructor;
non terminal ParListNode parlist;
non terminal FieldListNode fieldlist;
non terminal Field field;
non terminal fieldsep;
non terminal empty;

// Приоритеты
precedence nonassoc LPAREN, RPAREN;
precedence nonassoc COMMA;

precedence left OR;
precedence left AND;
precedence left BOR;
precedence left BXOR;
precedence left BAND;
precedence left EQUAL, NOTEQ;
precedence left LESSEQ, LESS, MORE, MOREEQ;
precedence left BRIGHT, BLEFT;
precedence left ADD, SUB, CONCAT;
precedence left MUL, DIV, MOD, FDIV;
precedence right POW;
precedence right UNMINUS, NOT, BNOT, LENGTH;

/* Продукции грамматики */
start with blockNode;

blockNode ::=  statlist:sl retstat:rs   {:
                                        //System.out.println("BlockNode with statlist and retstat");
                                        RESULT = new BlockNode(sl, rs);
                                    :}
         | statlist:sl              {:
                                        //System.out.println("BlockNode with statlist");
                                        RESULT = new BlockNode(sl, null);
                                    :}
         | retstat:rs               {:
                                        //System.out.println("BlockNode with retstat");
                                        StatementListNode sl = new StatementListNode();
                                        sl.setStart(rs.getStart());
                                        sl.setEnd(rs.getStart());
                                        RESULT = new BlockNode(sl, rs);
                                    :}
         | empty                    {:
										StatementListNode statlist = new StatementListNode();
										statlist.setStart(LocationFactory.from(null));
										statlist.setEnd(LocationFactory.from(null));
										//System.out.println("Empty blockNode");
										RESULT = new BlockNode(statlist, null);
                                    :}
         ;

statlist ::=  stat:s			    {:
									    //System.out.println("Single stat");
									    RESULT = new StatementListNode(s);
								    :}
            | stat:s statlist:sl    {:
                                       // System.out.println("Recurrent stat");
									    if (sl == null) {
										    sl = new StatementListNode(s);
										    RESULT = sl;
		                                } else {
		                                    sl.addStat(0, s);
		                                    RESULT = sl;
		                                }

								    :}
            ;

stat ::=  SEMICOLON                                                 {:
                                                                        //System.out.println("SEMICOLON");
                                                                    :}
        | varlist:vl ASSIGNMENT explist:el                          {:
                                                                        //System.out.println("statement");
                                                                        RESULT = new AssignmentNode(vl, el);
                                                                    :}
        | functioncall:fc                                           {:  RESULT = new FunctionCallStatementNode(fc); :}
        | BREAK                                                     {:  RESULT = new BreakNode(); :}
        | DO blockNode:b END                                            {:
                                                                        //System.out.println("statement - do end");
                                                                        RESULT = new DoBlockNode(b);
                                                                    :}
        | WHILE expression:e DO blockNode:b END                                {:  RESULT = new WhileBlockNode(e, b); :}
        | REPEAT blockNode:b UNTIL expression:e                                {:  RESULT = new RepeatUntilNode(b, e); :}
        | IF expression:e THEN blockNode:b elselist:elsel END                  {:  RESULT = new IfThenElseBlockNode(e, b, elsel); :}
        | FOR NAME:nameNode ASSIGNMENT expression:e1 COMMA expression:e2 comforexp:e3 DO blockNode:b END {:   RESULT = new ForBlockNode(nameNode, e1, e2, e3, b);  :}
        | FOR namelist:nl IN explist:el DO blockNode:b END              {:  RESULT = new ForInBlockNode(nl, el, b);  :}
        | FUNCTION funcname:fn funcbody:fb                          {:

                                                                        RESULT = new FunctionDefinitionNode(fn, fb);
                                                                    :}
        | LOCAL FUNCTION NAME:nameNode funcbody:fb                      {:  RESULT = new LocalFunctionDefinitionNode(nameNode, fb.getParListNode().getNameListNode(), fb.getParListNode().getVarParList(), fb.getBlockNode()); :}
        | LOCAL namelist:nl assignexplist:el                        {:  RESULT = new LocalNode(nl, el); :}
        ;

elselist ::=  ELSEIF expression:e THEN blockNode:b elselist:elsel     {:  RESULT = new BlockNode(new StatementListNode(new IfThenElseBlockNode(e, b, elsel)), null);   :}
            | ELSE blockNode:b                                 {:  RESULT = b;  :}
            | empty
            ;

comforexp ::=  COMMA expression:e                                 {:  RESULT = e;  :}
             | empty                                       {:  RESULT = new NumeralExpressionNode(1, NumeralExpressionNode.Type.INTEGER); :}
             ;

assignexplist ::=  ASSIGNMENT explist:el                   {:  RESULT = el; :}
                 | empty
                 ;

retstat ::=  RETURN explist:el SEMICOLON         {:  RESULT = new ReturnNode(el); :}
           | RETURN explist:el                   {:  RESULT = new ReturnNode(el); :}
           | RETURN SEMICOLON                    {:  RESULT = new ReturnNode(null); :}
           | RETURN                              {:  RESULT = new ReturnNode(null); :}
           ;

funcname ::=  NAME:nameNode                          {:  RESULT = new FunctionNameVarNode(new NameNode(nameNode)); :}
            | NAME:name1 COLON NAME:name2        {:  RESULT = new FunctionNameColonVarNode(new NameNode(name1), new NameNode(name2)); :}
            | NAME:nameNode DOT funcname:fn          {:  RESULT = new FunctionNameVarDotFunctionNameNode(new NameNode(nameNode), fn); :}
            ;

varlist ::=  var:v                               {:  RESULT = new VariableListNode(v); :}
           | var:v COMMA varlist:vl              {:
                                                     if (vl == null) {
                                                        vl = new VariableListNode(v);
                                                        RESULT = vl;
                                                     } else {
                                                        vl.addVar(0, v);
                                                        RESULT = vl;
                                                     }
                                                 :}
           ;

var ::=  NAME:nameNode                              {:  RESULT = new VariableNode(nameNode); :}
       | prefixexp:pe LBRACKET expression:e RBRACKET   {:  RESULT = new VariableTabIndexNode(pe, e); :}
       | prefixexp:pe DOT NAME:nameNode             {:  RESULT = new VariableTabIndexNode(pe,  new LiteralStringExpressionNode(nameNode)); :}
       ;

namelist ::=  NAME:nameNode                         {:  RESULT = new NameListNode(new NameNode(nameNode)); :}
            | namelist:nl COMMA NAME:nameNode       {:  nl.append(new NameNode(nameNode)); RESULT = nl; :}
            ;

explist ::=  expression:e                          {:  RESULT = new ExpressionListNode(e); :}
           | expression:e COMMA explist:el         {:
                                                if (el == null) {
                                                    el = new ExpressionListNode(e);
                                                    RESULT = el;
                                                } else {
                                                    el.addExp(0, e);
                                                    RESULT = el;
                                                }
                                            :}
           ;

expression	::=	 NIL                                {:  RESULT = new NilNode(); :}
	   | FALSE                              {:  RESULT = new BooleanExpressionNode(false); :}
	   | TRUE                               {:  RESULT = new BooleanExpressionNode(true);  :}
	   | NUMERAL:num                        {:
	                                            NumeralExpressionNode.Type type = null;

                                                if (num instanceof Double)
                                                    type = NumeralExpressionNode.Type.DOUBLE;
	                                            else if (num instanceof Integer || num instanceof Long)
	                                                type = NumeralExpressionNode.Type.INTEGER;

	                                            RESULT = new NumeralExpressionNode(num, type);
	                                        :}
	   | LITERAL_STRING:s                   {:  RESULT = new LiteralStringExpressionNode(s); :}
	   | PARAMS                             {:  RESULT = new DotDotDotNode();   :}
	   | FUNCTION funcbody:fb               {:  RESULT = new FunctionExpressionNode(fb.getParListNode().getNameListNode(), fb.getParListNode().getVarParList(), fb.getBlockNode()); :}
	   | prefixexp:pe                       {:  RESULT = new PrefixExpressionNode(pe); :}
	   | tableconstructor:tc                {:  RESULT = new TableConstructorExpressionNode(tc); :}
       | expression:e1 ADD expression:e2                  {:  RESULT = new BinaryOperationNode(e1, Operation.ADD, e2); :}
       | expression:e1 SUB expression:e2                  {:  RESULT = new BinaryOperationNode(e1, Operation.SUB, e2); :}
       | expression:e1 MUL expression:e2                  {:  RESULT = new BinaryOperationNode(e1, Operation.MUL, e2); :}
       | expression:e1 DIV expression:e2                  {:  RESULT = new BinaryOperationNode(e1, Operation.DIV, e2); :}
       | expression:e1 FDIV expression:e2                 {:  RESULT = new BinaryOperationNode(e1, Operation.FDIV, e2); :}
       | expression:e1 MOD expression:e2                  {:  RESULT = new BinaryOperationNode(e1, Operation.MOD, e2); :}
       | expression:e1 POW expression:e2                  {:  RESULT = new BinaryOperationNode(e1, Operation.POW, e2); :}
       | expression:e1 CONCAT expression:e2               {:  RESULT = new BinaryOperationNode(e1, Operation.CONCAT, e2); :}
       | expression:e1 EQUAL expression:e2                {:  RESULT = new BinaryOperationNode(e1, Operation.EQUAL, e2); :}
       | expression:e1 LESSEQ expression:e2               {:  RESULT = new BinaryOperationNode(e1, Operation.LESSEQ, e2); :}
       | expression:e1 NOTEQ expression:e2                {:  RESULT = new BinaryOperationNode(e1, Operation.NOTEQ, e2); :}
       | expression:e1 LESS expression:e2                 {:  RESULT = new BinaryOperationNode(e1, Operation.LESS, e2); :}
       | expression:e1 MORE expression:e2                 {:  RESULT = new BinaryOperationNode(e1, Operation.MORE, e2); :}
       | expression:e1 MOREEQ expression:e2               {:  RESULT = new BinaryOperationNode(e1, Operation.MOREEQ, e2); :}
       | expression:e1 AND expression:e2                  {:  RESULT = new BinaryOperationNode(e1, Operation.AND, e2); :}
       | expression:e1 OR expression:e2                   {:  RESULT = new BinaryOperationNode(e1, Operation.OR, e2); :}
       | expression:e1 BAND expression:e2                 {:  RESULT = new BinaryOperationNode(e1, Operation.BAND, e2); :}
       | expression:e1 BOR expression:e2                  {:  RESULT = new BinaryOperationNode(e1, Operation.BOR, e2); :}
       | expression:e1 BRIGHT expression:e2               {:  RESULT = new BinaryOperationNode(e1, Operation.BRIGHT, e2); :}
       | expression:e1 BLEFT expression:e2                {:  RESULT = new BinaryOperationNode(e1, Operation.BLEFT, e2); :}
       | expression:e1 BXOR expression:e2                 {:  RESULT = new BinaryOperationNode(e1, Operation.BXOR, e2); :}
	   | SUB expression:e                          {:  RESULT = new UnaryOperationNode(Operation.UNMINUS, e); :} %prec UNMINUS
	   | NOT expression:e                          {:  RESULT = new UnaryOperationNode(Operation.NOT, e); :}
	   | LENGTH expression:e                       {:  RESULT = new UnaryOperationNode(Operation.LENGTH, e); :}
	   | BXOR expression:e                         {:  RESULT = new UnaryOperationNode(Operation.BNOT, e); :}    %prec BNOT
	   ;

prefixexp ::=  var:v                       {:
                                                    //System.out.println("Prefixexp var");
                                                    RESULT = new PrefixExpressionVariableNode(v);
                                                :}
             | functioncall:fc                  {:
                                                    //System.out.println("Prefixexp");
                                                    RESULT = new PrefixExpressionFunctionCallNode(fc);
                                                :}
             | LPAREN expression:e RPAREN       {:
                                                    RESULT = new PrefixExpressionLPExpressionRPNode(e);
                                                :}
             ;

functioncall ::=  prefixexp:pexp args:ar                      {:  RESULT = new FunctionCallNode(pexp, ar); :}
                | prefixexp:pexp COLON NAME:nameNode args:ar  {:  RESULT = new FunctionCallSelfNode(pexp, nameNode, ar); :}
                ;

args ::=  LPAREN explist:el RPAREN                        {:  RESULT = el; :}
        | LPAREN RPAREN                                   {:  RESULT = new ExpressionListNode(null); :}
        | tableconstructor:tc                             {:  RESULT = new ExpressionListNode(new TableConstructorExpressionNode(tc)); :}
        | LITERAL_STRING:s                                {:  RESULT = new ExpressionListNode(new LiteralStringExpressionNode(s)); :}
        ;

funcbody ::=  LPAREN parlist:pl RPAREN blockNode:b END        {:  RESULT = new FunctionBodyNode(pl, b); :}
            ;

parlist ::=  namelist:nl COMMA PARAMS                     {:  RESULT = new ParListNode(nl, true);  :}
           | namelist:nl                                  {:  RESULT = new ParListNode(nl, false); :}
           | PARAMS                                       {:
                                                              //System.out.println("parlist -> PARAMS");
                                                              NameListNode nl = new NameListNode();
                                                              nl.setStart(LocationFactory.from(null));
                                                              nl.setEnd(LocationFactory.from(null));
                                                              RESULT = new ParListNode(nl, true);
                                                          :}
           |                                              {:
                                                              NameListNode nl = new NameListNode();
                                                              nl.setStart(LocationFactory.from(null));
                                                              nl.setEnd(LocationFactory.from(null));
                                                              RESULT = new ParListNode(nl, false);
                                                          :}
           ;

tableconstructor ::=  LBRACE fieldlist:fl RBRACE          {:  RESULT = new TableConstructorNode(fl); :}
                    | LBRACE RBRACE                       {:  RESULT = new TableConstructorNode(new FieldListNode()); :}
                    ;

fieldlist ::=  field:f fieldsep fieldlist:fl              {:
                                                              if (fl == null) {
                                                                  RESULT = new FieldListNode(f);
                                                              } else {
                                                                  fl.addField(0, f);
                                                                  RESULT = fl;
                                                              }
                                                          :}
             | field:f                                    {:  RESULT = new FieldListNode(f); :}
             ;

field ::=  LBRACKET expression:e1 RBRACKET ASSIGNMENT expression:e2     {:  RESULT = new FieldLeftRightExpressionNode(e1, e2); :}
         | NAME:nameNode ASSIGNMENT expression:e                     {:  RESULT = new FieldNameExpressionNode(nameNode, e); :}
         | expression:e                                          {:  RESULT = new FieldExpressionNode(e); :}
         ;

fieldsep ::=  COMMA
            | SEMICOLON
            ;

empty ::= /* empty */;