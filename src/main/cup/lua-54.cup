package ic7cc.ovchinnikov.compiler.parser;

/*
import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import ic7cc.ovchinnikov.compiler.ast.*;
import ic7cc.ovchinnikov.compiler.ast.node.*;
import ic7cc.ovchinnikov.compiler.parser.location.*;
*/
import ic7cc.ovchinnikov.compiler.lexer.Lexer;


parser code {:
  public void report_error(String message, Object info) {
      StringBuilder m = new StringBuilder("Error ");

      if (info instanceof java_cup.runtime.Symbol)
        m.append( "("+info.toString()+")" );

      m.append(" : "+message);

      System.out.println(m);
    }

    public void report_fatal_error(String message, Object info) {
      report_error(message, info);

    }
:};

 /* Терминалы (токены, которые будут прочитаны лексером). */

terminal ASSIGNMENT;                                        // =
terminal DOT, COLON, COLONCOLON;                            // операция точки и двоеточие, двойное двоеточие
terminal LOCAL, FUNCTION, END;
terminal DO, WHILE, FOR, IN, REPEAT, UNTIL;                 // циклические операторы
terminal IF, THEN, ELSE, ELSEIF, RETURN, BREAK;             // операторы управления выполнением кода
terminal NIL, FALSE, TRUE, PARAMS;                          // зарезервированные литералы
terminal ADD, MUL, SUB, DIV, MOD, POW, CONCAT;              // арифметические операторы и оператор конкатенации
terminal EQUAL, LESSEQ, NOTEQ, LESS, MORE, MOREEQ, AND, OR; // операторы отношения
terminal BAND, BOR, BRIGHT, BLEFT;                          // побитовые операторы
terminal NOT, LENGTH;                                       // унарные операторы
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;// скобки
terminal SEMICOLON, COMMA;                                  // точка с запятой и запятая
terminal NUMERAL, LITERAL_STRING;                           // Числовой и строковый литералы
terminal ID;                                                // Идентификаторы
terminal GOTO;

 /*Нетерминалы */

non terminal chunk;
non terminal block;
non terminal statlist;
non terminal retstat;
non terminal empty;
non terminal stat;
non terminal varlist;
non terminal explist;
non terminal functioncall;
non terminal label;
non terminal Name;
non terminal exp;
non terminal elseiflist;
non terminal elseblock;
non terminal expaddit;
non terminal namelist;
non terminal funcname;
non terminal funcbody;
non terminal attnamelist;
non terminal eqexplistaddit;
non terminal attrib;
non terminal attriblist;
non terminal dotnamelist;
non terminal varadditlist;
non terminal var;
non terminal nameadditlist;
non terminal expadditlist;
non terminal functiondef;
non terminal prefixexp;
non terminal tableconstructor;
non terminal binop;
non terminal unop;
non terminal args;
non terminal parlist;
non terminal fieldlist;
non terminal field;
non terminal fieldadditlist;
non terminal fieldsep;

// Приоритеты
precedence nonassoc LPAREN, RPAREN;
precedence nonassoc COMMA;

precedence left OR;
precedence left AND;
precedence left BOR;
precedence left BAND;
precedence left EQUAL, NOTEQ;
precedence left LESSEQ, LESS, MORE, MOREEQ;
precedence left BRIGHT, BLEFT;
precedence left ADD, SUB, CONCAT;
precedence left MUL, DIV, MOD;
precedence right POW;
precedence left LENGTH;

/* Продукции грамматики */

start with chunk;

chunk ::= block;

block ::=  statlist retstat
         | statlist
         | retstat
         | empty
         ;

statlist ::=  stat
            | stat statlist
            ;

stat ::=  SEMICOLON
        | varlist ASSIGNMENT explist
        | functioncall
        | label
        | BREAK
        | GOTO Name
        | DO block END
        | WHILE exp DO block END
        | REPEAT block UNTIL exp
        | IF exp THEN block elseiflist elseblock END
        | FOR Name ASSIGNMENT exp COMMA exp expaddit DO block END
        | FOR namelist IN explist DO block END
        | FUNCTION funcname funcbody
        | LOCAL FUNCTION Name funcbody
        | LOCAL attnamelist eqexplistaddit
        ;

elseiflist ::=  ELSEIF exp THEN block elseiflist
              | empty
              ;

elseblock ::=  ELSE block
             | empty
             ;

expaddit ::=  COMMA exp
            | empty
            ;

eqexplistaddit ::=  ASSIGNMENT explist
                  | empty
                  ;

attnamelist ::= Name attrib attriblist;

attrib ::=  LESS Name MORE
          | empty
          ;

attriblist ::=  COMMA Name attrib
              | empty
              ;

retstat ::=  RETURN explist SEMICOLON
           | RETURN explist
           | RETURN SEMICOLON
           | RETURN
           ;

label ::= COLONCOLON Name COLONCOLON;

funcname ::=  Name dotnamelist COLON Name
            | Name dotnamelist
            ;

dotnamelist ::=  DOT Name dotnamelist
               | empty
               ;

varlist ::= var varadditlist;

var ::=  Name
       | prefixexp LBRACKET exp RBRACKET
       | prefixexp DOT Name
       ;

varadditlist ::=  COMMA var varadditlist
                | empty
                ;

namelist ::= Name nameadditlist;

nameadditlist ::=  COMMA Name nameadditlist
                 | empty
                 ;

explist ::= exp expadditlist;

exp	::=	 NIL
	   | FALSE
	   | TRUE
	   | NUMERAL
	   | LITERAL_STRING
	   | PARAMS
	   | functiondef
	   | prefixexp
	   | tableconstructor
       | exp binop exp
	   | unop exp
	   ;

expadditlist ::=  COMMA exp expadditlist
                | empty
                ;

prefixexp ::=  var
             | functioncall
             | LPAREN exp RPAREN
             ;

functioncall ::=  prefixexp args
                | prefixexp COLON Name args
                ;

args ::=  LPAREN explist RPAREN
        | LPAREN RPAREN
        | tableconstructor
        | LITERAL_STRING
        ;

functiondef ::= FUNCTION funcbody;

funcbody ::=  LPAREN parlist RPAREN block END
            | LPAREN RPAREN block END
            ;

parlist ::=  namelist COMMA PARAMS
           | namelist
           | PARAMS;

tableconstructor ::=  LBRACE fieldlist RBRACE
                    | LBRACE RBRACE;

fieldlist ::=  field fieldadditlist fieldsep
             | field
             ;

field ::=  LBRACKET exp RBRACKET ASSIGNMENT exp
         | Name ASSIGNMENT exp
         | exp
         ;

fieldsep ::=  COMMA
            | SEMICOLON
            ;

fieldadditlist ::=  fieldsep field fieldadditlist
                  | empty
                  ;

binop ::=  ADD
		 | SUB
		 | MUL
		 | DIV
		 | MOD
		 | POW
		 | CONCAT
		 | EQUAL
		 | LESSEQ
		 | NOTEQ
		 | LESS
		 | MORE
		 | MOREEQ
		 | AND
		 | OR
		 | BAND
		 | BOR
		 | BRIGHT
		 | BLEFT
		 ;

unop ::=  SUB
		| NOT
		| LENGTH
		;

Name ::= ID;

empty ::= /* empty */;