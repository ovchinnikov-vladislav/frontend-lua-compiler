
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 30 04:27:19 MSK 2020
//----------------------------------------------------

package ic7cc.ovchinnikov.compiler.parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import ic7cc.ovchinnikov.compiler.ast.*;
import ic7cc.ovchinnikov.compiler.ast.node.*;
import ic7cc.ovchinnikov.compiler.parser.location.*;
import ic7cc.ovchinnikov.compiler.parser.grammar.*;
import ic7cc.ovchinnikov.compiler.lexer.Lexer;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 30 04:27:19 MSK 2020
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\004\003" +
    "\000\002\004\004\000\002\006\003\000\002\006\005\000" +
    "\002\006\003\000\002\006\003\000\002\006\005\000\002" +
    "\006\007\000\002\006\006\000\002\006\010\000\002\006" +
    "\014\000\002\006\011\000\002\006\005\000\002\006\006" +
    "\000\002\006\005\000\002\003\007\000\002\003\004\000" +
    "\002\003\003\000\002\015\004\000\002\015\003\000\002" +
    "\012\004\000\002\012\003\000\002\005\005\000\002\005" +
    "\004\000\002\005\004\000\002\005\003\000\002\017\006" +
    "\000\002\017\004\000\002\021\005\000\002\021\003\000" +
    "\002\007\004\000\002\023\003\000\002\023\006\000\002" +
    "\023\005\000\002\022\005\000\002\022\003\000\002\016" +
    "\004\000\002\024\005\000\002\024\003\000\002\010\004" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\004\000\002\014\003\000\002\014\003\000\002\014" +
    "\005\000\002\014\004\000\002\025\005\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\005\000" +
    "\002\013\004\000\002\013\006\000\002\011\005\000\002" +
    "\011\004\000\002\011\003\000\002\011\003\000\002\020" +
    "\007\000\002\020\006\000\002\032\005\000\002\032\003" +
    "\000\002\032\003\000\002\027\005\000\002\027\004\000" +
    "\002\033\005\000\002\033\004\000\002\034\007\000\002" +
    "\034\005\000\002\034\003\000\002\036\003\000\002\036" +
    "\003\000\002\035\005\000\002\035\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\037\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\034\002\uff95\007\007\010\012\012\017\013" +
    "\005\014\025\016\030\020\013\024\010\025\021\061\015" +
    "\067\004\073\011\001\002\000\044\002\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\061\ufffa\067" +
    "\ufffa\073\ufffa\001\002\000\036\010\035\026\040\027\050" +
    "\030\034\031\037\034\042\056\044\057\033\060\045\061" +
    "\015\065\041\071\054\072\053\073\011\001\002\000\016" +
    "\002\uffff\011\uffff\017\uffff\022\uffff\023\uffff\024\010\001" +
    "\002\000\006\010\274\073\164\001\002\000\052\002\uffe3" +
    "\010\035\011\uffe3\017\uffe3\022\uffe3\023\uffe3\026\040\027" +
    "\050\030\034\031\037\034\042\056\044\057\033\060\045" +
    "\061\015\065\041\067\270\071\054\072\053\073\011\001" +
    "\002\000\144\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055" +
    "\uffdd\056\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd" +
    "\066\uffdd\067\uffdd\070\uffdd\072\uffdd\073\uffdd\001\002\000" +
    "\004\073\257\001\002\000\036\010\035\026\040\027\050" +
    "\030\034\031\037\034\042\056\044\057\033\060\045\061" +
    "\015\065\041\071\054\072\053\073\011\001\002\000\004" +
    "\002\240\001\002\000\036\010\035\026\040\027\050\030" +
    "\034\031\037\034\042\056\044\057\033\060\045\061\015" +
    "\065\041\071\054\072\053\073\011\001\002\000\014\002" +
    "\ufffd\011\ufffd\017\ufffd\022\ufffd\023\ufffd\001\002\000\034" +
    "\007\007\010\012\011\uff95\012\017\013\005\014\025\016" +
    "\030\020\013\024\010\025\021\061\015\067\004\073\011" +
    "\001\002\000\056\002\ufff8\005\uffc6\006\uffc6\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\061\ufff8\063" +
    "\uffc6\065\uffc6\067\ufff8\072\uffc6\073\ufff8\001\002\000\044" +
    "\002\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\061\ufff7\067\ufff7\073\ufff7\001\002\000\016\005" +
    "\062\006\056\061\057\063\061\065\041\072\060\001\002" +
    "\000\044\002\ufffc\007\007\010\012\011\ufffc\012\017\013" +
    "\005\014\025\016\030\017\ufffc\020\013\022\ufffc\023\ufffc" +
    "\024\ufffc\025\021\061\015\067\004\073\011\001\002\000" +
    "\022\004\uff95\005\uffc7\006\uffc7\061\uffc7\063\uffc7\065\uffc7" +
    "\070\226\072\uffc7\001\002\000\004\073\205\001\002\000" +
    "\004\004\202\001\002\000\014\002\ufffe\011\ufffe\017\ufffe" +
    "\022\ufffe\023\ufffe\001\002\000\034\007\007\010\012\012" +
    "\017\013\005\014\025\016\030\017\uff95\020\013\024\010" +
    "\025\021\061\015\067\004\073\011\001\002\000\004\017" +
    "\032\001\002\000\036\010\035\026\040\027\050\030\034" +
    "\031\037\034\042\056\044\057\033\060\045\061\015\065" +
    "\041\071\054\072\053\073\011\001\002\000\036\010\uff98" +
    "\026\uff98\027\uff98\030\uff98\031\uff98\034\uff98\056\uff98\057" +
    "\uff98\060\uff98\061\uff98\065\uff98\071\uff98\072\uff98\073\uff98" +
    "\001\002\000\130\002\uffd2\007\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\013\uffd2\014\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\061\uffd2" +
    "\062\uffd2\064\uffd2\066\uffd2\067\uffd2\070\uffd2\073\uffd2\001" +
    "\002\000\004\061\160\001\002\000\116\002\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\032\106" +
    "\033\113\034\102\035\104\036\067\037\066\040\076\041" +
    "\077\042\074\043\110\044\071\045\114\046\103\047\073" +
    "\050\070\051\072\052\112\053\107\054\111\055\075\056" +
    "\105\061\ufff4\067\ufff4\073\ufff4\001\002\000\130\002\uffcf" +
    "\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\061\uffcf\062\uffcf\064\uffcf\066\uffcf" +
    "\067\uffcf\070\uffcf\073\uffcf\001\002\000\130\002\uffd4\007" +
    "\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\061\uffd4\062\uffd4\064\uffd4\066\uffd4\067" +
    "\uffd4\070\uffd4\073\uffd4\001\002\000\042\010\035\026\040" +
    "\027\050\030\034\031\037\034\042\056\044\057\033\060" +
    "\045\061\015\063\136\065\041\066\133\071\054\072\053" +
    "\073\134\001\002\000\036\010\uff99\026\uff99\027\uff99\030" +
    "\uff99\031\uff99\034\uff99\056\uff99\057\uff99\060\uff99\061\uff99" +
    "\065\uff99\071\uff99\072\uff99\073\uff99\001\002\000\142\002" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\013\uffc6\014\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\061\uffc6\062" +
    "\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6" +
    "\072\uffc6\073\uffc6\001\002\000\036\010\uff96\026\uff96\027" +
    "\uff96\030\uff96\031\uff96\034\uff96\056\uff96\057\uff96\060\uff96" +
    "\061\uff96\065\uff96\071\uff96\072\uff96\073\uff96\001\002\000" +
    "\036\010\uff97\026\uff97\027\uff97\030\uff97\031\uff97\034\uff97" +
    "\056\uff97\057\uff97\060\uff97\061\uff97\065\uff97\071\uff97\072" +
    "\uff97\073\uff97\001\002\000\036\010\035\026\040\027\050" +
    "\030\034\031\037\034\042\056\044\057\033\060\045\061" +
    "\015\065\041\071\054\072\053\073\011\001\002\000\130" +
    "\002\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\025\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\061\uffcc\062\uffcc\064\uffcc" +
    "\066\uffcc\067\uffcc\070\uffcc\073\uffcc\001\002\000\130\002" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045" +
    "\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\054\uffd3\055\uffd3\056\uffd3\061\uffd3\062\uffd3\064\uffd3\066" +
    "\uffd3\067\uffd3\070\uffd3\073\uffd3\001\002\000\142\002\uffcd" +
    "\005\062\006\056\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\061\057\062\uffcd" +
    "\063\061\064\uffcd\065\041\066\uffcd\067\uffcd\070\uffcd\072" +
    "\060\073\uffcd\001\002\000\142\002\uffc7\005\uffc7\006\uffc7" +
    "\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7" +
    "\065\uffc7\066\uffc7\067\uffc7\070\uffc7\072\uffc7\073\uffc7\001" +
    "\002\000\130\002\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\061\uffd0\062" +
    "\uffd0\064\uffd0\066\uffd0\067\uffd0\070\uffd0\073\uffd0\001\002" +
    "\000\130\002\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1" +
    "\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052" +
    "\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\061\uffd1\062\uffd1" +
    "\064\uffd1\066\uffd1\067\uffd1\070\uffd1\073\uffd1\001\002\000" +
    "\142\002\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\061" +
    "\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4" +
    "\070\uffc4\072\uffc4\073\uffc4\001\002\000\004\073\127\001" +
    "\002\000\040\010\035\026\040\027\050\030\034\031\037" +
    "\034\042\056\044\057\033\060\045\061\015\062\116\065" +
    "\041\071\054\072\053\073\011\001\002\000\142\002\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\032\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\061\uffbf\062\uffbf" +
    "\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\072" +
    "\uffbf\073\uffbf\001\002\000\036\010\035\026\040\027\050" +
    "\030\034\031\037\034\042\056\044\057\033\060\045\061" +
    "\015\065\041\071\054\072\053\073\011\001\002\000\004" +
    "\073\064\001\002\000\142\002\uffc0\005\uffc0\006\uffc0\007" +
    "\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0" +
    "\055\uffc0\056\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065" +
    "\uffc0\066\uffc0\067\uffc0\070\uffc0\072\uffc0\073\uffc0\001\002" +
    "\000\144\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\067\uffdb\070\uffdb\072\uffdb\073\uffdb\001\002\000\056" +
    "\032\106\033\113\034\102\035\104\036\067\037\066\040" +
    "\076\041\077\042\074\043\110\044\071\045\114\046\103" +
    "\047\073\050\070\051\072\052\112\053\107\054\111\055" +
    "\075\056\105\064\101\001\002\000\036\010\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\034\uffa9\056\uffa9\057\uffa9\060" +
    "\uffa9\061\uffa9\065\uffa9\071\uffa9\072\uffa9\073\uffa9\001\002" +
    "\000\036\010\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\034" +
    "\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\065\uffaa\071\uffaa" +
    "\072\uffaa\073\uffaa\001\002\000\036\010\uffa0\026\uffa0\027" +
    "\uffa0\030\uffa0\031\uffa0\034\uffa0\056\uffa0\057\uffa0\060\uffa0" +
    "\061\uffa0\065\uffa0\071\uffa0\072\uffa0\073\uffa0\001\002\000" +
    "\036\010\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\034\uffa4" +
    "\056\uffa4\057\uffa4\060\uffa4\061\uffa4\065\uffa4\071\uffa4\072" +
    "\uffa4\073\uffa4\001\002\000\036\010\uff9f\026\uff9f\027\uff9f" +
    "\030\uff9f\031\uff9f\034\uff9f\056\uff9f\057\uff9f\060\uff9f\061" +
    "\uff9f\065\uff9f\071\uff9f\072\uff9f\073\uff9f\001\002\000\036" +
    "\010\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\034\uffa1\056" +
    "\uffa1\057\uffa1\060\uffa1\061\uffa1\065\uffa1\071\uffa1\072\uffa1" +
    "\073\uffa1\001\002\000\036\010\uffa6\026\uffa6\027\uffa6\030" +
    "\uffa6\031\uffa6\034\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6" +
    "\065\uffa6\071\uffa6\072\uffa6\073\uffa6\001\002\000\036\010" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\034\uff9b\056\uff9b" +
    "\057\uff9b\060\uff9b\061\uff9b\065\uff9b\071\uff9b\072\uff9b\073" +
    "\uff9b\001\002\000\036\010\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\034\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\065" +
    "\uffa8\071\uffa8\072\uffa8\073\uffa8\001\002\000\036\010\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\031\uffa7\034\uffa7\056\uffa7\057" +
    "\uffa7\060\uffa7\061\uffa7\065\uffa7\071\uffa7\072\uffa7\073\uffa7" +
    "\001\002\000\036\010\035\026\040\027\050\030\034\031" +
    "\037\034\042\056\044\057\033\060\045\061\015\065\041" +
    "\071\054\072\053\073\011\001\002\000\144\002\uffdc\004" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\061\uffdc\062" +
    "\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc" +
    "\072\uffdc\073\uffdc\001\002\000\036\010\uffad\026\uffad\027" +
    "\uffad\030\uffad\031\uffad\034\uffad\056\uffad\057\uffad\060\uffad" +
    "\061\uffad\065\uffad\071\uffad\072\uffad\073\uffad\001\002\000" +
    "\036\010\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\034\uffa2" +
    "\056\uffa2\057\uffa2\060\uffa2\061\uffa2\065\uffa2\071\uffa2\072" +
    "\uffa2\073\uffa2\001\002\000\036\010\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\034\uffab\056\uffab\057\uffab\060\uffab\061" +
    "\uffab\065\uffab\071\uffab\072\uffab\073\uffab\001\002\000\036" +
    "\010\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\034\uff9a\056" +
    "\uff9a\057\uff9a\060\uff9a\061\uff9a\065\uff9a\071\uff9a\072\uff9a" +
    "\073\uff9a\001\002\000\036\010\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\034\uffae\056\uffae\057\uffae\060\uffae\061\uffae" +
    "\065\uffae\071\uffae\072\uffae\073\uffae\001\002\000\036\010" +
    "\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\034\uff9d\056\uff9d" +
    "\057\uff9d\060\uff9d\061\uff9d\065\uff9d\071\uff9d\072\uff9d\073" +
    "\uff9d\001\002\000\036\010\uffa5\026\uffa5\027\uffa5\030\uffa5" +
    "\031\uffa5\034\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\065" +
    "\uffa5\071\uffa5\072\uffa5\073\uffa5\001\002\000\036\010\uff9c" +
    "\026\uff9c\027\uff9c\030\uff9c\031\uff9c\034\uff9c\056\uff9c\057" +
    "\uff9c\060\uff9c\061\uff9c\065\uff9c\071\uff9c\072\uff9c\073\uff9c" +
    "\001\002\000\036\010\uff9e\026\uff9e\027\uff9e\030\uff9e\031" +
    "\uff9e\034\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\065\uff9e" +
    "\071\uff9e\072\uff9e\073\uff9e\001\002\000\036\010\uffac\026" +
    "\uffac\027\uffac\030\uffac\031\uffac\034\uffac\056\uffac\057\uffac" +
    "\060\uffac\061\uffac\065\uffac\071\uffac\072\uffac\073\uffac\001" +
    "\002\000\036\010\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3" +
    "\034\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\065\uffa3\071" +
    "\uffa3\072\uffa3\073\uffa3\001\002\000\130\002\uffcb\007\uffcb" +
    "\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\016\uffcb\017" +
    "\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\032\106\033\113\034\102\035\104\036\067\037\066\040" +
    "\076\041\077\042\074\043\110\044\071\045\114\046\103" +
    "\047\073\050\070\051\072\052\112\053\107\054\111\055" +
    "\075\056\105\061\uffcb\062\uffcb\064\uffcb\066\uffcb\067\uffcb" +
    "\070\uffcb\073\uffcb\001\002\000\142\002\uffc1\005\uffc1\006" +
    "\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\061\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\072\uffc1\073\uffc1" +
    "\001\002\000\004\062\126\001\002\000\122\002\uff95\007" +
    "\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\016\uff95" +
    "\017\uff95\020\uff95\022\uff95\023\uff95\024\uff95\025\uff95\032" +
    "\106\033\113\034\102\035\104\036\067\037\066\040\076" +
    "\041\077\042\074\043\110\044\071\045\114\046\103\047" +
    "\073\050\070\051\072\052\112\053\107\054\111\055\075" +
    "\056\105\061\uff95\062\uff95\067\uff95\070\122\073\uff95\001" +
    "\002\000\046\002\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\016\uffc8\017\uffc8\020\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\061\uffc8\062\uffc8\067\uffc8\073\uffc8" +
    "\001\002\000\036\010\035\026\040\027\050\030\034\031" +
    "\037\034\042\056\044\057\033\060\045\061\015\065\041" +
    "\071\054\072\053\073\011\001\002\000\046\002\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\061" +
    "\uffd5\062\uffd5\067\uffd5\073\uffd5\001\002\000\122\002\uff95" +
    "\007\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\016" +
    "\uff95\017\uff95\020\uff95\022\uff95\023\uff95\024\uff95\025\uff95" +
    "\032\106\033\113\034\102\035\104\036\067\037\066\040" +
    "\076\041\077\042\074\043\110\044\071\045\114\046\103" +
    "\047\073\050\070\051\072\052\112\053\107\054\111\055" +
    "\075\056\105\061\uff95\062\uff95\067\uff95\070\122\073\uff95" +
    "\001\002\000\046\002\uffc9\007\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\016\uffc9\017\uffc9\020\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\061\uffc9\062\uffc9\067\uffc9\073" +
    "\uffc9\001\002\000\142\002\uffc2\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\056\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2" +
    "\066\uffc2\067\uffc2\070\uffc2\072\uffc2\073\uffc2\001\002\000" +
    "\010\061\057\065\041\072\060\001\002\000\142\002\uffc3" +
    "\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\061\uffc3\062\uffc3" +
    "\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\072" +
    "\uffc3\073\uffc3\001\002\000\130\002\uffca\007\uffca\010\uffca" +
    "\011\uffca\012\uffca\013\uffca\014\uffca\016\uffca\017\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\032\106" +
    "\033\113\034\102\035\104\036\067\037\066\040\076\041" +
    "\077\042\074\043\110\044\071\045\114\046\103\047\073" +
    "\050\070\051\072\052\112\053\107\054\111\055\075\056" +
    "\105\061\uffca\062\uffca\064\uffca\066\uffca\067\uffca\070\uffca" +
    "\073\uffca\001\002\000\010\066\uff95\067\150\070\147\001" +
    "\002\000\142\002\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\014\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\032\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056" +
    "\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8" +
    "\067\uffb8\070\uffb8\072\uffb8\073\uffb8\001\002\000\100\004" +
    "\145\005\uffdd\006\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd" +
    "\053\uffdd\054\uffdd\055\uffdd\056\uffdd\061\uffdd\063\uffdd\065" +
    "\uffdd\066\uffdd\067\uffdd\070\uffdd\072\uffdd\001\002\000\062" +
    "\032\106\033\113\034\102\035\104\036\067\037\066\040" +
    "\076\041\077\042\074\043\110\044\071\045\114\046\103" +
    "\047\073\050\070\051\072\052\112\053\107\054\111\055" +
    "\075\056\105\066\uffb3\067\uffb3\070\uffb3\001\002\000\036" +
    "\010\035\026\040\027\050\030\034\031\037\034\042\056" +
    "\044\057\033\060\045\061\015\065\041\071\054\072\053" +
    "\073\011\001\002\000\004\066\140\001\002\000\142\002" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9" +
    "\072\uffb9\073\uffb9\001\002\000\056\032\106\033\113\034" +
    "\102\035\104\036\067\037\066\040\076\041\077\042\074" +
    "\043\110\044\071\045\114\046\103\047\073\050\070\051" +
    "\072\052\112\053\107\054\111\055\075\056\105\064\142" +
    "\001\002\000\004\004\143\001\002\000\036\010\035\026" +
    "\040\027\050\030\034\031\037\034\042\056\044\057\033" +
    "\060\045\061\015\065\041\071\054\072\053\073\011\001" +
    "\002\000\062\032\106\033\113\034\102\035\104\036\067" +
    "\037\066\040\076\041\077\042\074\043\110\044\071\045" +
    "\114\046\103\047\073\050\070\051\072\052\112\053\107" +
    "\054\111\055\075\056\105\066\uffb5\067\uffb5\070\uffb5\001" +
    "\002\000\036\010\035\026\040\027\050\030\034\031\037" +
    "\034\042\056\044\057\033\060\045\061\015\065\041\071" +
    "\054\072\053\073\011\001\002\000\062\032\106\033\113" +
    "\034\102\035\104\036\067\037\066\040\076\041\077\042" +
    "\074\043\110\044\071\045\114\046\103\047\073\050\070" +
    "\051\072\052\112\053\107\054\111\055\075\056\105\066" +
    "\uffb4\067\uffb4\070\uffb4\001\002\000\042\010\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\031\uffb2\034\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\061\uffb2\063\uffb2\065\uffb2\066\uffb2\071\uffb2\072\uffb2" +
    "\073\uffb2\001\002\000\042\010\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\034\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\063\uffb1\065\uffb1\066\uffb1\071\uffb1\072\uffb1\073\uffb1\001" +
    "\002\000\040\010\035\026\040\027\050\030\034\031\037" +
    "\034\042\056\044\057\033\060\045\061\015\063\136\065" +
    "\041\071\054\072\053\073\134\001\002\000\010\066\uffb6" +
    "\067\150\070\147\001\002\000\010\066\uffaf\067\uffaf\070" +
    "\uffaf\001\002\000\004\066\uffb7\001\002\000\010\066\uff95" +
    "\067\150\070\147\001\002\000\010\066\uffb0\067\uffb0\070" +
    "\uffb0\001\002\000\130\002\uffce\007\uffce\010\uffce\011\uffce" +
    "\012\uffce\013\uffce\014\uffce\016\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce" +
    "\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\061" +
    "\uffce\062\uffce\064\uffce\066\uffce\067\uffce\070\uffce\073\uffce" +
    "\001\002\000\010\031\163\062\162\073\164\001\002\000" +
    "\006\062\uffbb\070\200\001\002\000\034\007\007\010\012" +
    "\011\uff95\012\017\013\005\014\025\016\030\020\013\024" +
    "\010\025\021\061\015\067\004\073\011\001\002\000\004" +
    "\062\uffba\001\002\000\052\002\uff95\004\uff95\007\uff95\010" +
    "\uff95\011\uff95\012\uff95\013\uff95\014\uff95\016\uff95\017\uff95" +
    "\020\uff95\022\uff95\023\uff95\024\uff95\025\uff95\061\uff95\062" +
    "\uff95\067\uff95\070\171\073\uff95\001\002\000\004\062\166" +
    "\001\002\000\034\007\007\010\012\011\uff95\012\017\013" +
    "\005\014\025\016\030\020\013\024\010\025\021\061\015" +
    "\067\004\073\011\001\002\000\004\011\170\001\002\000" +
    "\130\002\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe" +
    "\014\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\054\uffbe\055\uffbe\056\uffbe\061\uffbe\062\uffbe\064" +
    "\uffbe\066\uffbe\067\uffbe\070\uffbe\073\uffbe\001\002\000\004" +
    "\073\174\001\002\000\054\002\uffd6\004\uffd6\007\uffd6\010" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\061" +
    "\uffd6\062\uffd6\067\uffd6\070\uffd6\073\uffd6\001\002\000\054" +
    "\002\uffd8\004\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\061\uffd8\062\uffd8\067\uffd8\070" +
    "\uffd8\073\uffd8\001\002\000\054\002\uff95\004\uff95\007\uff95" +
    "\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\022\uff95\023\uff95\024\uff95\025\uff95" +
    "\061\uff95\062\uff95\067\uff95\070\171\073\uff95\001\002\000" +
    "\054\002\uffd7\004\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\061\uffd7\062\uffd7\067\uffd7" +
    "\070\uffd7\073\uffd7\001\002\000\004\011\177\001\002\000" +
    "\130\002\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd" +
    "\014\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\055\uffbd\056\uffbd\061\uffbd\062\uffbd\064" +
    "\uffbd\066\uffbd\067\uffbd\070\uffbd\073\uffbd\001\002\000\004" +
    "\031\201\001\002\000\004\062\uffbc\001\002\000\036\010" +
    "\035\026\040\027\050\030\034\031\037\034\042\056\044" +
    "\057\033\060\045\061\015\065\041\071\054\072\053\073" +
    "\011\001\002\000\044\002\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\061\ufff9\067\ufff9\073\ufff9" +
    "\001\002\000\004\015\221\001\002\000\010\004\206\015" +
    "\uff95\070\171\001\002\000\036\010\035\026\040\027\050" +
    "\030\034\031\037\034\042\056\044\057\033\060\045\061" +
    "\015\065\041\071\054\072\053\073\011\001\002\000\056" +
    "\032\106\033\113\034\102\035\104\036\067\037\066\040" +
    "\076\041\077\042\074\043\110\044\071\045\114\046\103" +
    "\047\073\050\070\051\072\052\112\053\107\054\111\055" +
    "\075\056\105\070\210\001\002\000\036\010\035\026\040" +
    "\027\050\030\034\031\037\034\042\056\044\057\033\060" +
    "\045\061\015\065\041\071\054\072\053\073\011\001\002" +
    "\000\060\012\uff95\032\106\033\113\034\102\035\104\036" +
    "\067\037\066\040\076\041\077\042\074\043\110\044\071" +
    "\045\114\046\103\047\073\050\070\051\072\052\112\053" +
    "\107\054\111\055\075\056\105\070\214\001\002\000\004" +
    "\012\216\001\002\000\004\012\uffe9\001\002\000\036\010" +
    "\035\026\040\027\050\030\034\031\037\034\042\056\044" +
    "\057\033\060\045\061\015\065\041\071\054\072\053\073" +
    "\011\001\002\000\056\012\uffea\032\106\033\113\034\102" +
    "\035\104\036\067\037\066\040\076\041\077\042\074\043" +
    "\110\044\071\045\114\046\103\047\073\050\070\051\072" +
    "\052\112\053\107\054\111\055\075\056\105\001\002\000" +
    "\034\007\007\010\012\011\uff95\012\017\013\005\014\025" +
    "\016\030\020\013\024\010\025\021\061\015\067\004\073" +
    "\011\001\002\000\004\011\220\001\002\000\044\002\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\061\ufff2\067\ufff2\073\ufff2\001\002\000\036\010\035\026" +
    "\040\027\050\030\034\031\037\034\042\056\044\057\033" +
    "\060\045\061\015\065\041\071\054\072\053\073\011\001" +
    "\002\000\004\012\223\001\002\000\034\007\007\010\012" +
    "\011\uff95\012\017\013\005\014\025\016\030\020\013\024" +
    "\010\025\021\061\015\067\004\073\011\001\002\000\004" +
    "\011\225\001\002\000\044\002\ufff1\007\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\017\ufff1\020\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\025\ufff1\061\ufff1\067\ufff1\073" +
    "\ufff1\001\002\000\006\061\015\073\011\001\002\000\004" +
    "\004\uffd9\001\002\000\004\004\uffde\001\002\000\022\004" +
    "\uff95\005\uffc7\006\uffc7\061\uffc7\063\uffc7\065\uffc7\070\226" +
    "\072\uffc7\001\002\000\004\004\uffda\001\002\000\016\002" +
    "\ufffb\011\ufffb\017\ufffb\022\ufffb\023\ufffb\024\ufffb\001\002" +
    "\000\004\011\235\001\002\000\044\002\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\061\ufff6\067" +
    "\ufff6\073\ufff6\001\002\000\056\032\106\033\113\034\102" +
    "\035\104\036\067\037\066\040\076\041\077\042\074\043" +
    "\110\044\071\045\114\046\103\047\073\050\070\051\072" +
    "\052\112\053\107\054\111\055\075\056\105\062\237\001" +
    "\002\000\142\002\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\016\uffc5\017\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056" +
    "\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5" +
    "\067\uffc5\070\uffc5\072\uffc5\073\uffc5\001\002\000\004\002" +
    "\001\001\002\000\056\021\242\032\106\033\113\034\102" +
    "\035\104\036\067\037\066\040\076\041\077\042\074\043" +
    "\110\044\071\045\114\046\103\047\073\050\070\051\072" +
    "\052\112\053\107\054\111\055\075\056\105\001\002\000" +
    "\040\007\007\010\012\011\uff95\012\017\013\005\014\025" +
    "\016\030\020\013\022\uff95\023\uff95\024\010\025\021\061" +
    "\015\067\004\073\011\001\002\000\010\011\uff95\022\245" +
    "\023\244\001\002\000\036\010\035\026\040\027\050\030" +
    "\034\031\037\034\042\056\044\057\033\060\045\061\015" +
    "\065\041\071\054\072\053\073\011\001\002\000\034\007" +
    "\007\010\012\011\uff95\012\017\013\005\014\025\016\030" +
    "\020\013\024\010\025\021\061\015\067\004\073\011\001" +
    "\002\000\004\011\uffeb\001\002\000\004\011\250\001\002" +
    "\000\044\002\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\061\ufff3\067\ufff3\073\ufff3\001\002\000" +
    "\004\011\uffec\001\002\000\056\021\253\032\106\033\113" +
    "\034\102\035\104\036\067\037\066\040\076\041\077\042" +
    "\074\043\110\044\071\045\114\046\103\047\073\050\070" +
    "\051\072\052\112\053\107\054\111\055\075\056\105\001" +
    "\002\000\040\007\007\010\012\011\uff95\012\017\013\005" +
    "\014\025\016\030\020\013\022\uff95\023\uff95\024\010\025" +
    "\021\061\015\067\004\073\011\001\002\000\010\011\uff95" +
    "\022\245\023\244\001\002\000\004\011\uffed\001\002\000" +
    "\004\061\160\001\002\000\010\005\262\006\uff95\061\uff95" +
    "\001\002\000\006\006\265\061\uffe1\001\002\000\006\006" +
    "\uffdf\061\uffdf\001\002\000\004\073\263\001\002\000\010" +
    "\005\262\006\uff95\061\uff95\001\002\000\006\006\uffe0\061" +
    "\uffe0\001\002\000\004\073\266\001\002\000\004\061\uffe2" +
    "\001\002\000\044\002\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\016\ufff0\017\ufff0\020\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\061\ufff0\067\ufff0\073\ufff0\001" +
    "\002\000\014\002\uffe4\011\uffe4\017\uffe4\022\uffe4\023\uffe4" +
    "\001\002\000\016\002\uffe5\011\uffe5\017\uffe5\022\uffe5\023" +
    "\uffe5\067\272\001\002\000\014\002\uffe6\011\uffe6\017\uffe6" +
    "\022\uffe6\023\uffe6\001\002\000\046\002\uff95\004\277\007" +
    "\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\016\uff95" +
    "\017\uff95\020\uff95\022\uff95\023\uff95\024\uff95\025\uff95\061" +
    "\uff95\067\uff95\073\uff95\001\002\000\004\073\275\001\002" +
    "\000\004\061\160\001\002\000\044\002\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\016\uffef\017\uffef" +
    "\020\uffef\022\uffef\023\uffef\024\uffef\025\uffef\061\uffef\067" +
    "\uffef\073\uffef\001\002\000\036\010\035\026\040\027\050" +
    "\030\034\031\037\034\042\056\044\057\033\060\045\061" +
    "\015\065\041\071\054\072\053\073\011\001\002\000\044" +
    "\002\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\061\uffe7\067\uffe7\073\uffe7\001\002\000\044\002" +
    "\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\016\uffee\017\uffee\020\uffee\022\uffee\023\uffee\024\uffee\025" +
    "\uffee\061\uffee\067\uffee\073\uffee\001\002\000\044\002\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\061\uffe8\067\uffe8\073\uffe8\001\002\000\014\002\000\011" +
    "\000\017\000\022\000\023\000\001\002\000\056\012\305" +
    "\032\106\033\113\034\102\035\104\036\067\037\066\040" +
    "\076\041\077\042\074\043\110\044\071\045\114\046\103" +
    "\047\073\050\070\051\072\052\112\053\107\054\111\055" +
    "\075\056\105\001\002\000\034\007\007\010\012\011\uff95" +
    "\012\017\013\005\014\025\016\030\020\013\024\010\025" +
    "\021\061\015\067\004\073\011\001\002\000\004\011\307" +
    "\001\002\000\044\002\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\061\ufff5\067\ufff5\073\ufff5\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\024\002\013\004\005\005\026\006\022\007" +
    "\025\013\017\023\023\026\021\037\015\001\001\000\002" +
    "\001\001\000\016\013\042\014\303\023\051\026\050\027" +
    "\046\031\045\001\001\000\004\005\302\001\001\000\004" +
    "\016\272\001\001\000\020\010\270\013\042\014\117\023" +
    "\051\026\050\027\046\031\045\001\001\000\002\001\001" +
    "\000\004\017\255\001\001\000\016\013\042\014\240\023" +
    "\051\026\050\027\046\031\045\001\001\000\002\001\001" +
    "\000\016\013\042\014\235\023\051\026\050\027\046\031" +
    "\045\001\001\000\002\001\001\000\024\002\233\004\005" +
    "\005\026\006\022\007\025\013\017\023\023\026\021\037" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\054\027\062\001\001\000\016\004\232\006\022\007" +
    "\025\013\017\023\023\026\021\001\001\000\006\022\227" +
    "\037\226\001\001\000\004\016\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\030\004\005\005\026" +
    "\006\022\007\025\013\017\023\023\026\021\037\015\001" +
    "\001\000\002\001\001\000\016\013\042\014\035\023\051" +
    "\026\050\027\046\031\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\156\001\001\000\004\030\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\013" +
    "\042\014\134\023\051\026\050\027\046\031\045\033\136" +
    "\034\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\013\042\014\130" +
    "\023\051\026\050\027\046\031\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\054\027\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\116\013\042" +
    "\014\117\023\051\026\050\027\046\031\045\001\001\000" +
    "\002\001\001\000\016\013\042\014\064\023\051\026\050" +
    "\027\046\031\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\013\042\014\114\023\051\026\050\027\046\031\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\122\030\077\037\120\001\001\000\002\001\001" +
    "\000\016\013\042\014\123\023\051\026\050\027\046\031" +
    "\045\001\001\000\002\001\001\000\010\025\124\030\077" +
    "\037\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\127\027\062\001\001\000\002\001\001\000\004" +
    "\030\077\001\001\000\010\035\151\036\150\037\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\077" +
    "\001\001\000\016\013\042\014\140\023\051\026\050\027" +
    "\046\031\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\077\001\001\000\002\001\001\000\016\013" +
    "\042\014\143\023\051\026\050\027\046\031\045\001\001" +
    "\000\004\030\077\001\001\000\016\013\042\014\145\023" +
    "\051\026\050\027\046\031\045\001\001\000\004\030\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\042\014\134\023\051\026\050\027\046\031\045\034\154" +
    "\001\001\000\004\036\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\035\155\036\150\037\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\160\032" +
    "\164\001\001\000\002\001\001\000\024\002\175\004\005" +
    "\005\026\006\022\007\025\013\017\023\023\026\021\037" +
    "\015\001\001\000\002\001\001\000\006\024\172\037\171" +
    "\001\001\000\002\001\001\000\024\002\166\004\005\005" +
    "\026\006\022\007\025\013\017\023\023\026\021\037\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\174" +
    "\037\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\202\013\042\014\117\023\051\026\050\027\046\031" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\172\037\171\001\001\000\016\013\042\014\206\023" +
    "\051\026\050\027\046\031\045\001\001\000\004\030\077" +
    "\001\001\000\016\013\042\014\210\023\051\026\050\027" +
    "\046\031\045\001\001\000\010\015\211\030\077\037\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\013" +
    "\042\014\214\023\051\026\050\027\046\031\045\001\001" +
    "\000\004\030\077\001\001\000\024\002\216\004\005\005" +
    "\026\006\022\007\025\013\017\023\023\026\021\037\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\221\013\042\014\117\023\051\026\050\027\046\031\045" +
    "\001\001\000\002\001\001\000\024\002\223\004\005\005" +
    "\026\006\022\007\025\013\017\023\023\026\021\037\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\042\023\230\026\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\231\037\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\077\001\001\000\024\002\242\004\005" +
    "\005\026\006\022\007\025\013\017\023\023\026\021\037" +
    "\015\001\001\000\006\003\246\037\245\001\001\000\016" +
    "\013\042\014\251\023\051\026\050\027\046\031\045\001" +
    "\001\000\024\002\250\004\005\005\026\006\022\007\025" +
    "\013\017\023\023\026\021\037\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\077\001\001\000\024\002\253\004\005\005" +
    "\026\006\022\007\025\013\017\023\023\026\021\037\015" +
    "\001\001\000\006\003\254\037\245\001\001\000\002\001" +
    "\001\000\004\020\266\001\001\000\006\021\257\037\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\263\037\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\300\037\277\001\001\000\002\001\001\000\004\020" +
    "\275\001\001\000\002\001\001\000\020\010\301\013\042" +
    "\014\117\023\051\026\050\027\046\031\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\077\001\001\000\024\002\305\004" +
    "\005\005\026\006\022\007\025\013\017\023\023\026\021" +
    "\037\015\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


  public boolean syntaxErrors;
  DefaultProductionRuleBroadcaster productionRuleBroadcaster;
  Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    productionRuleBroadcaster = new DefaultProductionRuleBroadcaster();

    symbolFactory = lex.getSymbolFactory();

    lexer = lex;

  }

  public int line, column;

  public void report_error(String message, Object info) {
    syntaxErrors = true;

    if (!(info instanceof Symbol) ) return;

    Symbol symbol = (Symbol) info;
    line = symbol.left;
    column = symbol.right;

    if (symbol.left < 0 || symbol.right < 0) return;

    System.out.println(message + " at line " + symbol.left + ", column " + symbol.right);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // empty ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // unop ::= BXOR 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // unop ::= LENGTH 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // unop ::= NOT 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // unop ::= SUB 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // binop ::= BXOR 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // binop ::= BLEFT 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // binop ::= BRIGHT 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // binop ::= BOR 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // binop ::= BAND 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // binop ::= OR 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // binop ::= AND 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // binop ::= MOREEQ 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // binop ::= MORE 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // binop ::= LESS 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // binop ::= NOTEQ 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // binop ::= LESSEQ 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // binop ::= EQUAL 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // binop ::= CONCAT 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // binop ::= POW 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // binop ::= MOD 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // binop ::= FDIV 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // binop ::= DIV 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // binop ::= MUL 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // binop ::= SUB 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // binop ::= ADD 
            {
              Operation RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // fieldadditlist ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldadditlist",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // fieldadditlist ::= fieldsep field fieldadditlist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldadditlist",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // fieldsep ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsep",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // fieldsep ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsep",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // field ::= exp 
            {
              Field RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // field ::= NAME ASSIGNMENT exp 
            {
              Field RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // field ::= LBRACKET exp RBRACKET ASSIGNMENT exp 
            {
              Field RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // fieldlist ::= field fieldadditlist 
            {
              FieldList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // fieldlist ::= field fieldadditlist fieldsep 
            {
              FieldList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tableconstructor ::= LBRACE RBRACE 
            {
              TableConstructor RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tableconstructor ::= LBRACE fieldlist RBRACE 
            {
              TableConstructor RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parlist ::= PARAMS 
            {
              ParList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parlist ::= namelist 
            {
              ParList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parlist ::= namelist COMMA PARAMS 
            {
              ParList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // funcbody ::= LPAREN RPAREN block END 
            {
              FuncBody RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcbody",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // funcbody ::= LPAREN parlist RPAREN block END 
            {
              FuncBody RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcbody",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // args ::= LITERAL_STRING 
            {
              ExpList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // args ::= tableconstructor 
            {
              ExpList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // args ::= LPAREN RPAREN 
            {
              ExpList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // args ::= LPAREN explist RPAREN 
            {
              ExpList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // functioncall ::= prefixexp COLON NAME args 
            {
              FunctionCall RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // functioncall ::= prefixexp args 
            {
              FunctionCall RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // prefixexp ::= LPAREN exp RPAREN 
            {
              PrefixExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                    RESULT = new PrefixExpExp(e);
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // prefixexp ::= functioncall 
            {
              PrefixExp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                    System.out.println("Prefixexp");
                                                    RESULT = new PrefixExpFuncCall(fc);
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // prefixexp ::= var 
            {
              PrefixExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                    System.out.println("Prefixexp var");
                                                    RESULT = new PrefixExpVar(v);
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expadditlist ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expadditlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expadditlist ::= COMMA exp expadditlist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expadditlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= unop exp 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp binop exp 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= tableconstructor 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= prefixexp 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= FUNCTION funcbody 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= PARAMS 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= LITERAL_STRING 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= NUMERAL 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= TRUE 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= FALSE 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= NIL 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // explist ::= exp expadditlist 
            {
              ExpList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // nameadditlist ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameadditlist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // nameadditlist ::= COMMA NAME nameadditlist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameadditlist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // namelist ::= NAME nameadditlist 
            {
              NameList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // varadditlist ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varadditlist",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // varadditlist ::= COMMA var varadditlist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varadditlist",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var ::= prefixexp DOT NAME 
            {
              Var RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var ::= prefixexp LBRACKET exp RBRACKET 
            {
              Var RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var ::= NAME 
            {
              Var RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // varlist ::= var varadditlist 
            {
              VarList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dotnamelist ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dotnamelist",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dotnamelist ::= DOT NAME dotnamelist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dotnamelist",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcname ::= NAME dotnamelist 
            {
              FuncName RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcname ::= NAME dotnamelist COLON NAME 
            {
              FuncName RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // retstat ::= RETURN 
            {
              RetStat RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retstat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // retstat ::= RETURN SEMICOLON 
            {
              RetStat RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retstat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // retstat ::= RETURN explist 
            {
              RetStat RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retstat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // retstat ::= RETURN explist SEMICOLON 
            {
              RetStat RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retstat",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assignexplist ::= empty 
            {
              ExpList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexplist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assignexplist ::= ASSIGNMENT explist 
            {
              ExpList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignexplist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comforexp ::= empty 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comforexp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comforexp ::= COMMA exp 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comforexp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elselist ::= empty 
            {
              Block RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elselist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // elselist ::= ELSE block 
            {
              Block RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elselist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // elselist ::= ELSEIF exp THEN block elselist 
            {
              Block RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elselist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stat ::= LOCAL namelist assignexplist 
            {
              Stat RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new LocalDecl(nl, el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stat ::= LOCAL FUNCTION NAME funcbody 
            {
              Stat RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncBody fb = (FuncBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new LocalFunctionDef(name, fb.getArgs(), fb.getVarArgs(), fb.getBlock()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat ::= FUNCTION funcname funcbody 
            {
              Stat RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FuncName fn = (FuncName)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncBody fb = (FuncBody)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                        VarList vl = FuncSyntactic.funcNameToVarList(fn);
                                                                        vl.setStart(fn.getStart());
                                                                        vl.setEnd(fn.getEnd());

                                                                        ExpList args = FuncSyntactic.methodDefinitionToExpression(fn, fb);
                                                                        args.setStart(fb.getStart());
                                                                        args.setEnd(fb.getEnd());

                                                                        Assignment asm = new Assignment(vl, args);

                                                                        RESULT = asm;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat ::= FOR namelist IN explist DO block END 
            {
              Stat RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		NameList nl = (NameList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new ForInBlock(nl, el, b);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= FOR NAME ASSIGNMENT exp COMMA exp comforexp DO block END 
            {
              Stat RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT = new ForBlock(name, e1, e2, e3, b);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= IF exp THEN block elselist END 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elselleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elselright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block elsel = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new IfThenElseBlock(e, b, elsel); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= REPEAT block UNTIL exp 
            {
              Stat RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new RepeatUntil(b, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= WHILE exp DO block END 
            {
              Stat RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new WhileBlock(e, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stat ::= DO block END 
            {
              Stat RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                        System.out.println("stat - do end");
                                                                        RESULT = new DoBlock(b);
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stat ::= BREAK 
            {
              Stat RESULT =null;
		  RESULT = new Break(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stat ::= functioncall 
            {
              Stat RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new FuncCallStatement(fc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stat ::= varlist ASSIGNMENT explist 
            {
              Stat RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarList vl = (VarList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                        System.out.println("stat");
                                                                        RESULT = new Assignment(vl, el);
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stat ::= SEMICOLON 
            {
              Stat RESULT =null;
		
                                                                        System.out.println("SEMICOLON");
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statlist ::= stat statlist 
            {
              StatList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatList sl = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        System.out.println("Recurrent stat");
									    if (sl == null) {
										    sl = new StatList(s);
										    RESULT = sl;
		                                } else {
		                                    sl.addStat(0, s);
		                                    RESULT = sl;
		                                }

								    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statlist",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statlist ::= stat 
            {
              StatList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
									    System.out.println("Single stat");
									    RESULT = new StatList(s);
								    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statlist",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= empty 
            {
              Block RESULT =null;
		
										StatList statlist = new StatList();
										statlist.setStart(LocationFactory.from(null));
										statlist.setEnd(LocationFactory.from(null));
										System.out.println("Empty block");
										RESULT = new Block(statlist, null);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= retstat 
            {
              Block RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RetStat rs = (RetStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        System.out.println("Block with retstat");
                                        StatList sl = new StatList();
                                        sl.setStart(rs.getStart());
                                        sl.setEnd(rs.getStart());
                                        RESULT = new Block(sl, rs);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= statlist 
            {
              Block RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatList sl = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        System.out.println("Block with statlist");
                                        RESULT = new Block(sl, null);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // block ::= statlist retstat 
            {
              Block RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatList sl = (StatList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		RetStat rs = (RetStat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        System.out.println("Block with statlist and retstat");
                                        RESULT = new Block(sl, rs);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= block EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block start_val = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

