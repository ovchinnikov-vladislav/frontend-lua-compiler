
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 29 19:19:42 MSK 2020
//----------------------------------------------------

package ic7cc.ovchinnikov.compiler.parser;

import ic7cc.ovchinnikov.compiler.lexer.Lexer;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 29 19:19:42 MSK 2020
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\005\004" +
    "\000\002\005\005\000\002\006\004\000\002\006\005\000" +
    "\002\006\004\000\002\004\005\000\002\004\003\000\002" +
    "\004\005\000\002\004\007\000\002\004\006\000\002\004" +
    "\010\000\002\004\014\000\002\004\011\000\002\004\005" +
    "\000\002\004\006\000\002\004\005\000\002\010\003\000" +
    "\002\010\005\000\002\013\003\000\002\013\005\000\002" +
    "\021\004\000\002\021\006\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\005\000\002\016\004\000\002\016\004\000\002" +
    "\003\004\000\002\003\007\000\002\003\003\000\002\017" +
    "\004\000\002\017\003\000\002\012\003\000\002\012\005" +
    "\000\002\007\003\000\002\007\005\000\002\007\005\000" +
    "\002\022\007\000\002\015\004\000\002\015\003\000\002" +
    "\011\003\000\002\011\006\000\002\011\005\000\002\020" +
    "\003\000\002\020\003\000\002\020\005\000\002\014\005" +
    "\000\002\014\004\000\002\014\003\000\002\014\003\000" +
    "\002\024\005\000\002\024\004\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\023\003\000\002\023\005\000" +
    "\002\023\003\000\002\023\002\000\002\025\003\000\002" +
    "\025\005\000\002\026\007\000\002\026\005\000\002\026" +
    "\003\000\002\027\003\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\033\003\000" +
    "\002\033\003\000\002\035\003\000\002\034\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\032\002\uff9b\007\006\010\011\012\017\013" +
    "\004\014\025\016\027\020\012\024\010\025\021\057\014" +
    "\071\015\001\002\000\034\010\034\026\040\027\051\030" +
    "\036\031\037\034\042\055\033\056\046\057\014\063\041" +
    "\067\044\070\043\071\015\001\002\000\020\002\uffff\011" +
    "\uffff\017\uffff\022\uffff\023\uffff\024\010\025\021\001\002" +
    "\000\006\010\252\071\015\001\002\000\140\002\uffce\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce" +
    "\013\uffce\014\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022" +
    "\uffce\023\uffce\024\uffce\025\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\057\uffce\060\uffce\061\uffce\062" +
    "\uffce\063\uffce\064\uffce\065\uffce\066\uffce\070\uffce\071\uffce" +
    "\001\002\000\050\002\uff9b\010\034\011\uff9b\017\uff9b\022" +
    "\uff9b\023\uff9b\026\040\027\051\030\036\031\037\034\042" +
    "\055\033\056\046\057\014\063\041\065\210\067\044\070" +
    "\043\071\015\001\002\000\004\071\015\001\002\000\034" +
    "\010\034\026\040\027\051\030\036\031\037\034\042\055" +
    "\033\056\046\057\014\063\041\067\044\070\043\071\015" +
    "\001\002\000\004\002\221\001\002\000\034\010\034\026" +
    "\040\027\051\030\036\031\037\034\042\055\033\056\046" +
    "\057\014\063\041\067\044\070\043\071\015\001\002\000" +
    "\140\002\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c" +
    "\011\uff9c\012\uff9c\013\uff9c\014\uff9c\016\uff9c\017\uff9c\020" +
    "\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\032\uff9c" +
    "\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041" +
    "\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c" +
    "\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\057\uff9c\060" +
    "\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c" +
    "\070\uff9c\071\uff9c\001\002\000\014\002\ufffd\011\ufffd\017" +
    "\ufffd\022\ufffd\023\ufffd\001\002\000\032\007\006\010\011" +
    "\011\uff9b\012\017\013\004\014\025\016\027\020\012\024" +
    "\010\025\021\057\014\071\015\001\002\000\056\002\ufff6" +
    "\005\uffca\006\uffca\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\016\ufff6\017\ufff6\020\ufff6\022\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\057\ufff6\061\uffca\063\uffca\065\ufff6\070" +
    "\uffca\071\ufff6\001\002\000\016\002\uff9b\011\uff9b\017\uff9b" +
    "\022\uff9b\023\uff9b\065\210\001\002\000\016\005\061\006" +
    "\056\057\057\061\060\063\041\070\054\001\002\000\044" +
    "\002\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\022\uff9b\023\uff9b\024\uff9b" +
    "\025\uff9b\057\uff9b\065\210\071\uff9b\001\002\000\022\004" +
    "\uffec\005\uffcb\006\uffcb\057\uffcb\061\uffcb\063\uffcb\066\206" +
    "\070\uffcb\001\002\000\004\071\163\001\002\000\004\004" +
    "\161\001\002\000\032\007\006\010\011\012\017\013\004" +
    "\014\025\016\027\017\uff9b\020\012\024\010\025\021\057" +
    "\014\071\015\001\002\000\014\002\ufffe\011\ufffe\017\ufffe" +
    "\022\ufffe\023\ufffe\001\002\000\004\017\032\001\002\000" +
    "\034\010\034\026\040\027\051\030\036\031\037\034\042" +
    "\055\033\056\046\057\014\063\041\067\044\070\043\071" +
    "\015\001\002\000\034\010\uffae\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\034\uffae\055\uffae\056\uffae\057\uffae\063\uffae\067" +
    "\uffae\070\uffae\071\uffae\001\002\000\004\057\145\001\002" +
    "\000\112\002\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\032\104\033\110\034\100\035\102\036" +
    "\065\037\074\040\075\041\072\042\105\043\067\044\111" +
    "\045\101\046\071\047\066\050\070\051\106\052\103\053" +
    "\107\054\073\057\ufff3\065\ufff3\071\ufff3\001\002\000\124" +
    "\002\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4" +
    "\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\054\uffe4\057\uffe4\060\uffe4\062\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\071\uffe4\001\002\000\124\002\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\057\uffe1" +
    "\060\uffe1\062\uffe1\064\uffe1\065\uffe1\066\uffe1\071\uffe1\001" +
    "\002\000\124\002\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\057\uffe6\060\uffe6\062\uffe6\064" +
    "\uffe6\065\uffe6\066\uffe6\071\uffe6\001\002\000\040\010\034" +
    "\026\040\027\051\030\036\031\037\034\042\055\033\056" +
    "\046\057\014\061\130\063\041\064\125\067\044\070\043" +
    "\071\015\001\002\000\034\010\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\034\uffaf\055\uffaf\056\uffaf\057\uffaf\063\uffaf" +
    "\067\uffaf\070\uffaf\071\uffaf\001\002\000\124\002\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\016\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2" +
    "\057\uffe2\060\uffe2\062\uffe2\064\uffe2\065\uffe2\066\uffe2\071" +
    "\uffe2\001\002\000\124\002\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\052\uffe3\053\uffe3\054\uffe3\057\uffe3\060\uffe3\062" +
    "\uffe3\064\uffe3\065\uffe3\066\uffe3\071\uffe3\001\002\000\136" +
    "\002\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012" +
    "\uffca\013\uffca\014\uffca\016\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca" +
    "\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051" +
    "\uffca\052\uffca\053\uffca\054\uffca\057\uffca\060\uffca\061\uffca" +
    "\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\070\uffca\071" +
    "\uffca\001\002\000\034\010\uffad\026\uffad\027\uffad\030\uffad" +
    "\031\uffad\034\uffad\055\uffad\056\uffad\057\uffad\063\uffad\067" +
    "\uffad\070\uffad\071\uffad\001\002\000\034\010\034\026\040" +
    "\027\051\030\036\031\037\034\042\055\033\056\046\057" +
    "\014\063\041\067\044\070\043\071\015\001\002\000\124" +
    "\002\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\054\uffdf\057\uffdf\060\uffdf\062\uffdf\064\uffdf\065\uffdf" +
    "\066\uffdf\071\uffdf\001\002\000\124\002\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047" +
    "\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\057\uffe5" +
    "\060\uffe5\062\uffe5\064\uffe5\065\uffe5\066\uffe5\071\uffe5\001" +
    "\002\000\136\002\uffe0\005\061\006\056\007\uffe0\010\uffe0" +
    "\011\uffe0\012\uffe0\013\uffe0\014\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\057\057\060" +
    "\uffe0\061\060\062\uffe0\063\041\064\uffe0\065\uffe0\066\uffe0" +
    "\070\054\071\uffe0\001\002\000\136\002\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb" +
    "\054\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\070\uffcb\071\uffcb\001\002\000\136" +
    "\002\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\057\uffc5\060\uffc5\061\uffc5" +
    "\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\070\uffc5\071" +
    "\uffc5\001\002\000\136\002\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8" +
    "\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8" +
    "\066\uffe8\070\uffe8\071\uffe8\001\002\000\004\071\015\001" +
    "\002\000\036\010\034\026\040\027\051\030\036\031\037" +
    "\034\042\055\033\056\046\057\014\060\113\063\041\067" +
    "\044\070\043\071\015\001\002\000\034\010\034\026\040" +
    "\027\051\030\036\031\037\034\042\055\033\056\046\057" +
    "\014\063\041\067\044\070\043\071\015\001\002\000\004" +
    "\071\063\001\002\000\136\002\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6" +
    "\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065" +
    "\uffc6\066\uffc6\070\uffc6\071\uffc6\001\002\000\140\002\uffcc" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051" +
    "\uffcc\052\uffcc\053\uffcc\054\uffcc\057\uffcc\060\uffcc\061\uffcc" +
    "\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\070\uffcc\071" +
    "\uffcc\001\002\000\052\032\104\033\110\034\100\035\102" +
    "\036\065\037\074\040\075\041\072\042\105\043\067\044" +
    "\111\045\101\046\071\047\066\050\070\051\106\052\103" +
    "\053\107\054\073\062\077\001\002\000\034\010\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\034\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\063\uffbe\067\uffbe\070\uffbe\071\uffbe\001\002\000" +
    "\034\010\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\034\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\063\uffb5\067\uffb5\070\uffb5\071" +
    "\uffb5\001\002\000\034\010\uffb9\026\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\034\uffb9\055\uffb9\056\uffb9\057\uffb9\063\uffb9\067" +
    "\uffb9\070\uffb9\071\uffb9\001\002\000\034\010\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\034\uffb4\055\uffb4\056\uffb4\057" +
    "\uffb4\063\uffb4\067\uffb4\070\uffb4\071\uffb4\001\002\000\034" +
    "\010\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\034\uffb6\055" +
    "\uffb6\056\uffb6\057\uffb6\063\uffb6\067\uffb6\070\uffb6\071\uffb6" +
    "\001\002\000\034\010\uffbb\026\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\034\uffbb\055\uffbb\056\uffbb\057\uffbb\063\uffbb\067\uffbb" +
    "\070\uffbb\071\uffbb\001\002\000\034\010\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\034\uffb0\055\uffb0\056\uffb0\057\uffb0" +
    "\063\uffb0\067\uffb0\070\uffb0\071\uffb0\001\002\000\034\010" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\034\uffbd\055\uffbd" +
    "\056\uffbd\057\uffbd\063\uffbd\067\uffbd\070\uffbd\071\uffbd\001" +
    "\002\000\034\010\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\034\uffbc\055\uffbc\056\uffbc\057\uffbc\063\uffbc\067\uffbc\070" +
    "\uffbc\071\uffbc\001\002\000\034\010\034\026\040\027\051" +
    "\030\036\031\037\034\042\055\033\056\046\057\014\063" +
    "\041\067\044\070\043\071\015\001\002\000\140\002\uffcd" +
    "\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\053\uffcd\054\uffcd\057\uffcd\060\uffcd\061\uffcd" +
    "\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\070\uffcd\071" +
    "\uffcd\001\002\000\034\010\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\034\uffc1\055\uffc1\056\uffc1\057\uffc1\063\uffc1\067" +
    "\uffc1\070\uffc1\071\uffc1\001\002\000\034\010\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\034\uffb7\055\uffb7\056\uffb7\057" +
    "\uffb7\063\uffb7\067\uffb7\070\uffb7\071\uffb7\001\002\000\034" +
    "\010\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\034\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\063\uffbf\067\uffbf\070\uffbf\071\uffbf" +
    "\001\002\000\034\010\uffb2\026\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\034\uffb2\055\uffb2\056\uffb2\057\uffb2\063\uffb2\067\uffb2" +
    "\070\uffb2\071\uffb2\001\002\000\034\010\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\034\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\063\uffc2\067\uffc2\070\uffc2\071\uffc2\001\002\000\034\010" +
    "\uffba\026\uffba\027\uffba\030\uffba\031\uffba\034\uffba\055\uffba" +
    "\056\uffba\057\uffba\063\uffba\067\uffba\070\uffba\071\uffba\001" +
    "\002\000\034\010\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\034\uffb3\055\uffb3\056\uffb3\057\uffb3\063\uffb3\067\uffb3\070" +
    "\uffb3\071\uffb3\001\002\000\034\010\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\034\uffb1\055\uffb1\056\uffb1\057\uffb1\063" +
    "\uffb1\067\uffb1\070\uffb1\071\uffb1\001\002\000\034\010\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\034\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\063\uffc0\067\uffc0\070\uffc0\071\uffc0\001\002" +
    "\000\034\010\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\034" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\063\uffb8\067\uffb8\070\uffb8" +
    "\071\uffb8\001\002\000\124\002\uffde\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\032\104\033" +
    "\110\034\100\035\102\036\065\037\074\040\075\041\072" +
    "\042\105\043\067\044\111\045\101\046\071\047\066\050" +
    "\070\051\106\052\103\053\107\054\073\057\uffde\060\uffde" +
    "\062\uffde\064\uffde\065\uffde\066\uffde\071\uffde\001\002\000" +
    "\136\002\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\057\uffc7\060\uffc7\061" +
    "\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\070\uffc7" +
    "\071\uffc7\001\002\000\004\060\120\001\002\000\116\002" +
    "\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\016\uffea\017\uffea\020\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\032\104\033\110\034\100\035\102\036\065\037\074" +
    "\040\075\041\072\042\105\043\067\044\111\045\101\046" +
    "\071\047\066\050\070\051\106\052\103\053\107\054\073" +
    "\057\uffea\060\uffea\065\uffea\066\116\071\uffea\001\002\000" +
    "\034\010\034\026\040\027\051\030\036\031\037\034\042" +
    "\055\033\056\046\057\014\063\041\067\044\070\043\071" +
    "\015\001\002\000\046\002\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\016\uffe9\017\uffe9\020\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\057\uffe9\060\uffe9\065\uffe9" +
    "\071\uffe9\001\002\000\136\002\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065" +
    "\uffc8\066\uffc8\070\uffc8\071\uffc8\001\002\000\010\057\057" +
    "\063\041\070\054\001\002\000\136\002\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\054\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064" +
    "\uffe7\065\uffe7\066\uffe7\070\uffe7\071\uffe7\001\002\000\124" +
    "\002\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\032\104\033\110\034\100\035\102\036" +
    "\065\037\074\040\075\041\072\042\105\043\067\044\111" +
    "\045\101\046\071\047\066\050\070\051\106\052\103\053" +
    "\107\054\073\057\uffdd\060\uffdd\062\uffdd\064\uffdd\065\uffdd" +
    "\066\uffdd\071\uffdd\001\002\000\010\064\uffa8\065\142\066" +
    "\141\001\002\000\136\002\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3" +
    "\066\uffc3\070\uffc3\071\uffc3\001\002\000\074\004\137\005" +
    "\uffce\006\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045" +
    "\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce" +
    "\054\uffce\057\uffce\061\uffce\063\uffce\064\uffce\065\uffce\066" +
    "\uffce\070\uffce\001\002\000\056\032\104\033\110\034\100" +
    "\035\102\036\065\037\074\040\075\041\072\042\105\043" +
    "\067\044\111\045\101\046\071\047\066\050\070\051\106" +
    "\052\103\053\107\054\073\064\uffa4\065\uffa4\066\uffa4\001" +
    "\002\000\034\010\034\026\040\027\051\030\036\031\037" +
    "\034\042\055\033\056\046\057\014\063\041\067\044\070" +
    "\043\071\015\001\002\000\004\064\132\001\002\000\136" +
    "\002\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\052\uffc4\053\uffc4\054\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\070\uffc4\071" +
    "\uffc4\001\002\000\052\032\104\033\110\034\100\035\102" +
    "\036\065\037\074\040\075\041\072\042\105\043\067\044" +
    "\111\045\101\046\071\047\066\050\070\051\106\052\103" +
    "\053\107\054\073\062\134\001\002\000\004\004\135\001" +
    "\002\000\034\010\034\026\040\027\051\030\036\031\037" +
    "\034\042\055\033\056\046\057\014\063\041\067\044\070" +
    "\043\071\015\001\002\000\056\032\104\033\110\034\100" +
    "\035\102\036\065\037\074\040\075\041\072\042\105\043" +
    "\067\044\111\045\101\046\071\047\066\050\070\051\106" +
    "\052\103\053\107\054\073\064\uffa6\065\uffa6\066\uffa6\001" +
    "\002\000\034\010\034\026\040\027\051\030\036\031\037" +
    "\034\042\055\033\056\046\057\014\063\041\067\044\070" +
    "\043\071\015\001\002\000\056\032\104\033\110\034\100" +
    "\035\102\036\065\037\074\040\075\041\072\042\105\043" +
    "\067\044\111\045\101\046\071\047\066\050\070\051\106" +
    "\052\103\053\107\054\073\064\uffa5\065\uffa5\066\uffa5\001" +
    "\002\000\036\010\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3" +
    "\034\uffa3\055\uffa3\056\uffa3\057\uffa3\061\uffa3\063\uffa3\067" +
    "\uffa3\070\uffa3\071\uffa3\001\002\000\036\010\uffa2\026\uffa2" +
    "\027\uffa2\030\uffa2\031\uffa2\034\uffa2\055\uffa2\056\uffa2\057" +
    "\uffa2\061\uffa2\063\uffa2\067\uffa2\070\uffa2\071\uffa2\001\002" +
    "\000\036\010\034\026\040\027\051\030\036\031\037\034" +
    "\042\055\033\056\046\057\014\061\130\063\041\067\044" +
    "\070\043\071\015\001\002\000\004\064\uffa7\001\002\000" +
    "\010\031\151\060\uffa9\071\015\001\002\000\124\002\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\057\uffdc\060\uffdc\062\uffdc\064\uffdc\065\uffdc\066\uffdc" +
    "\071\uffdc\001\002\000\054\002\uffd6\004\uffd6\007\uffd6\010" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\057" +
    "\uffd6\060\uffd6\065\uffd6\066\uffd6\071\uffd6\001\002\000\006" +
    "\060\uffac\066\156\001\002\000\004\060\uffaa\001\002\000" +
    "\004\060\153\001\002\000\032\007\006\010\011\011\uff9b" +
    "\012\017\013\004\014\025\016\027\020\012\024\010\025" +
    "\021\057\014\071\015\001\002\000\004\011\155\001\002" +
    "\000\124\002\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1" +
    "\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052" +
    "\uffd1\053\uffd1\054\uffd1\057\uffd1\060\uffd1\062\uffd1\064\uffd1" +
    "\065\uffd1\066\uffd1\071\uffd1\001\002\000\006\031\160\071" +
    "\157\001\002\000\054\002\uffd5\004\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\057\uffd5" +
    "\060\uffd5\065\uffd5\066\uffd5\071\uffd5\001\002\000\004\060" +
    "\uffab\001\002\000\034\010\034\026\040\027\051\030\036" +
    "\031\037\034\042\055\033\056\046\057\014\063\041\067" +
    "\044\070\043\071\015\001\002\000\044\002\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\057\ufff7" +
    "\065\ufff7\071\ufff7\001\002\000\010\004\173\015\uff9c\066" +
    "\uff9c\001\002\000\006\015\166\066\165\001\002\000\004" +
    "\071\157\001\002\000\034\010\034\026\040\027\051\030" +
    "\036\031\037\034\042\055\033\056\046\057\014\063\041" +
    "\067\044\070\043\071\015\001\002\000\004\012\170\001" +
    "\002\000\032\007\006\010\011\011\uff9b\012\017\013\004" +
    "\014\025\016\027\020\012\024\010\025\021\057\014\071" +
    "\015\001\002\000\004\011\172\001\002\000\044\002\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\057\ufff0\065\ufff0\071\ufff0\001\002\000\034\010\034\026" +
    "\040\027\051\030\036\031\037\034\042\055\033\056\046" +
    "\057\014\063\041\067\044\070\043\071\015\001\002\000" +
    "\052\032\104\033\110\034\100\035\102\036\065\037\074" +
    "\040\075\041\072\042\105\043\067\044\111\045\101\046" +
    "\071\047\066\050\070\051\106\052\103\053\107\054\073" +
    "\066\175\001\002\000\034\010\034\026\040\027\051\030" +
    "\036\031\037\034\042\055\033\056\046\057\014\063\041" +
    "\067\044\070\043\071\015\001\002\000\054\012\uff9b\032" +
    "\104\033\110\034\100\035\102\036\065\037\074\040\075" +
    "\041\072\042\105\043\067\044\111\045\101\046\071\047" +
    "\066\050\070\051\106\052\103\053\107\054\073\066\201" +
    "\001\002\000\004\012\203\001\002\000\004\012\uffd7\001" +
    "\002\000\034\010\034\026\040\027\051\030\036\031\037" +
    "\034\042\055\033\056\046\057\014\063\041\067\044\070" +
    "\043\071\015\001\002\000\052\012\uffd8\032\104\033\110" +
    "\034\100\035\102\036\065\037\074\040\075\041\072\042" +
    "\105\043\067\044\111\045\101\046\071\047\066\050\070" +
    "\051\106\052\103\053\107\054\073\001\002\000\032\007" +
    "\006\010\011\011\uff9b\012\017\013\004\014\025\016\027" +
    "\020\012\024\010\025\021\057\014\071\015\001\002\000" +
    "\004\011\205\001\002\000\044\002\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\057\ufff1\065\ufff1" +
    "\071\ufff1\001\002\000\006\057\014\071\015\001\002\000" +
    "\004\004\uffeb\001\002\000\042\002\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\014\uff9e\016\uff9e\017\uff9e\020" +
    "\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\057\uff9e\071\uff9e" +
    "\001\002\000\042\002\uff9d\007\uff9d\010\uff9d\011\uff9d\012" +
    "\uff9d\013\uff9d\014\uff9d\016\uff9d\017\uff9d\020\uff9d\022\uff9d" +
    "\023\uff9d\024\uff9d\025\uff9d\057\uff9d\071\uff9d\001\002\000" +
    "\042\002\ufffc\007\006\010\011\011\ufffc\012\017\013\004" +
    "\014\025\016\027\017\ufffc\020\012\022\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\057\014\071\015\001\002\000\020\002\ufffb" +
    "\011\ufffb\017\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\001" +
    "\002\000\014\002\ufff8\011\ufff8\017\ufff8\022\ufff8\023\ufff8" +
    "\001\002\000\004\011\216\001\002\000\044\002\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\057" +
    "\ufff5\065\ufff5\071\ufff5\001\002\000\052\032\104\033\110" +
    "\034\100\035\102\036\065\037\074\040\075\041\072\042" +
    "\105\043\067\044\111\045\101\046\071\047\066\050\070" +
    "\051\106\052\103\053\107\054\073\060\220\001\002\000" +
    "\136\002\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\016\uffc9\017\uffc9\020\uffc9\021" +
    "\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\054\uffc9\057\uffc9\060\uffc9\061" +
    "\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\070\uffc9" +
    "\071\uffc9\001\002\000\004\002\001\001\002\000\052\021" +
    "\223\032\104\033\110\034\100\035\102\036\065\037\074" +
    "\040\075\041\072\042\105\043\067\044\111\045\101\046" +
    "\071\047\066\050\070\051\106\052\103\053\107\054\073" +
    "\001\002\000\036\007\006\010\011\011\uff9b\012\017\013" +
    "\004\014\025\016\027\020\012\022\uff9b\023\uff9b\024\010" +
    "\025\021\057\014\071\015\001\002\000\010\011\uff9b\022" +
    "\226\023\225\001\002\000\034\010\034\026\040\027\051" +
    "\030\036\031\037\034\042\055\033\056\046\057\014\063" +
    "\041\067\044\070\043\071\015\001\002\000\032\007\006" +
    "\010\011\011\uff9b\012\017\013\004\014\025\016\027\020" +
    "\012\024\010\025\021\057\014\071\015\001\002\000\004" +
    "\011\uffd9\001\002\000\004\011\231\001\002\000\044\002" +
    "\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\057\ufff2\065\ufff2\071\ufff2\001\002\000\004\011\uffdb" +
    "\001\002\000\052\021\234\032\104\033\110\034\100\035" +
    "\102\036\065\037\074\040\075\041\072\042\105\043\067" +
    "\044\111\045\101\046\071\047\066\050\070\051\106\052" +
    "\103\053\107\054\073\001\002\000\036\007\006\010\011" +
    "\011\uff9b\012\017\013\004\014\025\016\027\020\012\022" +
    "\uff9b\023\uff9b\024\010\025\021\057\014\071\015\001\002" +
    "\000\010\011\uff9b\022\226\023\225\001\002\000\004\011" +
    "\uffda\001\002\000\004\057\145\001\002\000\010\005\242" +
    "\006\241\057\uffd4\001\002\000\004\071\015\001\002\000" +
    "\004\071\015\001\002\000\004\057\uffd3\001\002\000\004" +
    "\057\uffd2\001\002\000\044\002\uffef\007\uffef\010\uffef\011" +
    "\uffef\012\uffef\013\uffef\014\uffef\016\uffef\017\uffef\020\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\057\uffef\065\uffef\071" +
    "\uffef\001\002\000\014\002\ufffa\011\ufffa\017\ufffa\022\ufffa" +
    "\023\ufffa\001\002\000\016\002\uff9b\011\uff9b\017\uff9b\022" +
    "\uff9b\023\uff9b\065\210\001\002\000\014\002\ufff9\011\ufff9" +
    "\017\ufff9\022\ufff9\023\ufff9\001\002\000\050\002\uff9b\004" +
    "\255\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b" +
    "\016\uff9b\017\uff9b\020\uff9b\022\uff9b\023\uff9b\024\uff9b\025" +
    "\uff9b\057\uff9b\065\uff9b\066\165\071\uff9b\001\002\000\004" +
    "\071\015\001\002\000\004\057\145\001\002\000\044\002" +
    "\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\016\uffee\017\uffee\020\uffee\022\uffee\023\uffee\024\uffee\025" +
    "\uffee\057\uffee\065\uffee\071\uffee\001\002\000\034\010\034" +
    "\026\040\027\051\030\036\031\037\034\042\055\033\056" +
    "\046\057\014\063\041\067\044\070\043\071\015\001\002" +
    "\000\044\002\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\016\uffed\017\uffed\020\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\057\uffed\065\uffed\071\uffed\001\002\000" +
    "\044\002\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\016\uffcf\017\uffcf\020\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\057\uffcf\065\uffcf\071\uffcf\001\002\000\044" +
    "\002\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\057\uffd0\065\uffd0\071\uffd0\001\002\000\014\002" +
    "\000\011\000\017\000\022\000\023\000\001\002\000\052" +
    "\012\263\032\104\033\110\034\100\035\102\036\065\037" +
    "\074\040\075\041\072\042\105\043\067\044\111\045\101" +
    "\046\071\047\066\050\070\051\106\052\103\053\107\054" +
    "\073\001\002\000\032\007\006\010\011\011\uff9b\012\017" +
    "\013\004\014\025\016\027\020\012\024\010\025\021\057" +
    "\014\071\015\001\002\000\004\011\265\001\002\000\044" +
    "\002\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\025\ufff4\057\ufff4\065\ufff4\071\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\263\000\026\002\012\004\022\005\004\006\027\010" +
    "\025\011\023\020\021\021\017\034\015\035\006\001\001" +
    "\000\020\011\052\016\261\020\051\021\044\024\047\032" +
    "\046\035\006\001\001\000\004\006\260\001\001\000\006" +
    "\012\250\035\146\001\001\000\002\001\001\000\026\011" +
    "\052\013\246\016\114\020\051\021\044\024\047\032\046" +
    "\033\245\034\210\035\006\001\001\000\006\007\236\035" +
    "\237\001\001\000\020\011\052\016\221\020\051\021\044" +
    "\024\047\032\046\035\006\001\001\000\002\001\001\000" +
    "\020\011\052\016\216\020\051\021\044\024\047\032\046" +
    "\035\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\002\214\004\022\005\004\006\027\010\025\011\023" +
    "\020\021\021\017\034\015\035\006\001\001\000\002\001" +
    "\001\000\006\033\213\034\210\001\001\000\006\014\054" +
    "\024\061\001\001\000\006\033\211\034\210\001\001\000" +
    "\002\001\001\000\006\012\163\035\146\001\001\000\002" +
    "\001\001\000\026\002\030\004\022\005\004\006\027\010" +
    "\025\011\023\020\021\021\017\034\015\035\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\011\052\016" +
    "\034\020\051\021\044\024\047\032\046\035\006\001\001" +
    "\000\002\001\001\000\004\022\145\001\001\000\004\031" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\011\052\016\126\020\051\021\044\024" +
    "\047\025\130\026\123\032\046\035\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\011\052\016\122\020\051" +
    "\021\044\024\047\032\046\035\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\054\024\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\120\001\001\000\022\011\052\013\113\016\114" +
    "\020\051\021\044\024\047\032\046\035\006\001\001\000" +
    "\020\011\052\016\063\020\051\021\044\024\047\032\046" +
    "\035\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\011\052\016\111\020" +
    "\051\021\044\024\047\032\046\035\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\075\001\001\000\022\011" +
    "\052\013\116\016\114\020\051\021\044\024\047\032\046" +
    "\035\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\121\024\061\001\001\000\002\001\001\000\004" +
    "\031\075\001\001\000\004\027\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\075\001\001\000\020" +
    "\011\052\016\132\020\051\021\044\024\047\032\046\035" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\075\001\001\000\002\001\001\000\020\011\052\016" +
    "\135\020\051\021\044\024\047\032\046\035\006\001\001" +
    "\000\004\031\075\001\001\000\020\011\052\016\137\020" +
    "\051\021\044\024\047\032\046\035\006\001\001\000\004" +
    "\031\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\011\052\016\126\020\051\021\044\024\047\025\143" +
    "\026\123\032\046\035\125\001\001\000\002\001\001\000" +
    "\010\012\147\023\151\035\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\002\153\004\022\005\004\006\027" +
    "\010\025\011\023\020\021\021\017\034\015\035\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\011\052\013" +
    "\161\016\114\020\051\021\044\024\047\032\046\035\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\011\052\013\166\016\114" +
    "\020\051\021\044\024\047\032\046\035\006\001\001\000" +
    "\002\001\001\000\026\002\170\004\022\005\004\006\027" +
    "\010\025\011\023\020\021\021\017\034\015\035\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\052" +
    "\016\173\020\051\021\044\024\047\032\046\035\006\001" +
    "\001\000\004\031\075\001\001\000\020\011\052\016\175" +
    "\020\051\021\044\024\047\032\046\035\006\001\001\000" +
    "\010\017\176\031\075\034\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\011\052\016\201\020\051\021" +
    "\044\024\047\032\046\035\006\001\001\000\004\031\075" +
    "\001\001\000\026\002\203\004\022\005\004\006\027\010" +
    "\025\011\023\020\021\021\017\034\015\035\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\206\011" +
    "\023\020\021\021\044\035\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\004\022\005" +
    "\212\010\025\011\023\020\021\021\017\035\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\075\001\001\000\026\002" +
    "\223\004\022\005\004\006\027\010\025\011\023\020\021" +
    "\021\017\034\015\035\006\001\001\000\006\003\227\034" +
    "\226\001\001\000\020\011\052\016\232\020\051\021\044" +
    "\024\047\032\046\035\006\001\001\000\026\002\231\004" +
    "\022\005\004\006\027\010\025\011\023\020\021\021\017" +
    "\034\015\035\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\075" +
    "\001\001\000\026\002\234\004\022\005\004\006\027\010" +
    "\025\011\023\020\021\021\017\034\015\035\006\001\001" +
    "\000\006\003\235\034\226\001\001\000\002\001\001\000" +
    "\004\022\244\001\001\000\002\001\001\000\004\035\243" +
    "\001\001\000\006\007\242\035\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\247\034\210\001\001\000\002\001\001\000" +
    "\006\015\255\034\256\001\001\000\004\035\252\001\001" +
    "\000\004\022\253\001\001\000\002\001\001\000\022\011" +
    "\052\013\257\016\114\020\051\021\044\024\047\032\046" +
    "\035\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\075\001\001" +
    "\000\026\002\263\004\022\005\004\006\027\010\025\011" +
    "\023\020\021\021\017\034\015\035\006\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public void report_error(String message, Object info) {
      StringBuilder m = new StringBuilder("Error ");

      if (info instanceof java_cup.runtime.Symbol)
        m.append( "("+info.toString()+")" );

      m.append(" : "+message);

      System.out.println(m);
    }

    public void report_fatal_error(String message, Object info) {
      report_error(message, info);

    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // empty ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Name ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Name",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // optsemi ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optsemi",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // optsemi ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optsemi",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // optfieldsep ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optfieldsep",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // optfieldsep ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optfieldsep",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // optfieldsep ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optfieldsep",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // fieldsep ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsep",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // fieldsep ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldsep",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // field ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // field ::= Name ASSIGNMENT exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // field ::= LBRACKET exp RBRACKET ASSIGNMENT exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // fieldlist ::= field fieldsep fieldlist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // fieldlist ::= field 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parlist ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parlist ::= PARAMS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parlist ::= namelist COMMA PARAMS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parlist ::= namelist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unop ::= LENGTH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // unop ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // unop ::= SUB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // binop ::= BLEFT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binop ::= BRIGHT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // binop ::= BOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // binop ::= BAND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // binop ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // binop ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // binop ::= MOREEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // binop ::= MORE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // binop ::= LESS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // binop ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // binop ::= LESSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // binop ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // binop ::= CONCAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // binop ::= POW 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // binop ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // binop ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // binop ::= MUL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // binop ::= SUB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // binop ::= ADD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tableconstructor ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tableconstructor ::= LBRACE fieldlist RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // args ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // args ::= tableconstructor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // args ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // args ::= LPAREN explist RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // prefixexp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // prefixexp ::= functioncall 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // prefixexp ::= var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // var ::= prefixexp DOT ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var ::= prefixexp LBRACKET exp RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // var ::= Name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // optassignexplist ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optassignexplist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // optassignexplist ::= ASSIGNMENT explist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optassignexplist",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // funcbody ::= LPAREN parlist RPAREN block END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcbody",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // funcname ::= Name COLON Name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // funcname ::= Name DOT funcname 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funcname ::= Name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // namelist ::= namelist COMMA ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // namelist ::= Name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // optforexp ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optforexp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // optforexp ::= COMMA exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optforexp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // optelse ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optelse",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // optelse ::= ELSEIF exp THEN block optelse 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optelse",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // optelse ::= ELSE block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("optelse",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= FUNCTION funcbody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= unop exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp binop exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= tableconstructor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= prefixexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= PARAMS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= NIL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // functioncall ::= prefixexp COLON Name args 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // functioncall ::= prefixexp args 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // explist ::= exp COMMA explist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // explist ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // varlist ::= var COMMA varlist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // varlist ::= var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stat ::= LOCAL namelist optassignexplist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stat ::= LOCAL FUNCTION Name funcbody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stat ::= FUNCTION funcname funcbody 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat ::= FOR namelist IN explist DO block END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat ::= FOR ID ASSIGNMENT exp COMMA exp optforexp DO block END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= IF exp THEN block optelse END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= REPEAT block UNTIL exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= WHILE exp DO block END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= DO block END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stat ::= functioncall 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stat ::= varlist ASSIGNMENT explist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // retstat ::= BREAK optsemi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retstat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // retstat ::= RETURN explist optsemi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retstat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // retstat ::= RETURN optsemi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retstat",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statlist ::= stat optsemi statlist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statlist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statlist ::= stat optsemi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statlist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= empty 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= retstat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= statlist 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // block ::= statlist retstat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= block EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

